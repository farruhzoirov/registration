/*
 * ATTENTION: The "eval" devtool has been used (maybe by default in mode: "development").
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
/******/ (() => { // webpackBootstrap
/******/ 	"use strict";
/******/ 	var __webpack_modules__ = ({

/***/ "./public/js/_authorization.js":
/*!*************************************!*\
  !*** ./public/js/_authorization.js ***!
  \*************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (__WEBPACK_DEFAULT_EXPORT__)\n/* harmony export */ });\n/* harmony import */ var _redirect__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./_redirect */ \"./public/js/_redirect.js\");\n\r\n\r\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (() => {\r\n    try {\r\n        const href = window.location.href;\r\n        const user = JSON.parse(localStorage.getItem('user'));\r\n        const userNotStored = !user || !user?.time | !user?.name?.length || user?.phone?.length !== 12 || !['1', '2', '3'].includes(user?.tariff);\r\n\r\n        if (href.includes('payment.html')) {\r\n            localStorage.removeItem('payed');\r\n            if (userNotStored) {\r\n                (0,_redirect__WEBPACK_IMPORTED_MODULE_0__[\"default\"])('');\r\n            }\r\n            return;\r\n        }\r\n        if (href.includes('complete.html')) {\r\n            const payed = localStorage.getItem('payed');\r\n            if (userNotStored || payed !== 'true') {\r\n                (0,_redirect__WEBPACK_IMPORTED_MODULE_0__[\"default\"])('');\r\n            }\r\n            return;\r\n        }\r\n        localStorage.clear();\r\n    } catch (e) {\r\n        (0,_redirect__WEBPACK_IMPORTED_MODULE_0__[\"default\"])('');\r\n    }\r\n});\r\n\n\n//# sourceURL=webpack://registration/./public/js/_authorization.js?");

/***/ }),

/***/ "./public/js/_config.js":
/*!******************************!*\
  !*** ./public/js/_config.js ***!
  \******************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   _config: () => (/* binding */ _config)\n/* harmony export */ });\nconst _config = {\r\n    // HOST: 'https://api.fulfil.uz/'\r\n    HOST: 'http://localhost:5000/'\r\n}\n\n//# sourceURL=webpack://registration/./public/js/_config.js?");

/***/ }),

/***/ "./public/js/_modal.js":
/*!*****************************!*\
  !*** ./public/js/_modal.js ***!
  \*****************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (__WEBPACK_DEFAULT_EXPORT__)\n/* harmony export */ });\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (() => {\r\n    try {\r\n        const registrationInfoTabs = document.querySelectorAll('.registration-tabs__item--hint');\r\n        const modalBackdrop = document.querySelector('.modal-container');\r\n        const modalCloserElements = document.querySelectorAll('[data-modal-closer]')\r\n\r\n        const closeModal = () => {\r\n            modalBackdrop.classList.remove('modal-container--open');\r\n        }\r\n\r\n        modalCloserElements.forEach(el => {\r\n            el.addEventListener('click', e => {\r\n                if (e.target.hasAttribute('data-modal-closer')) {\r\n                    closeModal();\r\n                }\r\n            })\r\n        })\r\n\r\n        document.addEventListener('keydown', e => {\r\n            if (e.key === 'Escape') {\r\n                closeModal();\r\n            }\r\n        })\r\n\r\n        registrationInfoTabs.forEach(el => {\r\n            el.addEventListener('click', () => {\r\n                modalBackdrop.classList.add('modal-container--open');\r\n            })\r\n        })\r\n    } catch (e) {}\r\n});\r\n\r\n\n\n//# sourceURL=webpack://registration/./public/js/_modal.js?");

/***/ }),

/***/ "./public/js/_payment.js":
/*!*******************************!*\
  !*** ./public/js/_payment.js ***!
  \*******************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (__WEBPACK_DEFAULT_EXPORT__)\n/* harmony export */ });\n/* harmony import */ var _redirect__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./_redirect */ \"./public/js/_redirect.js\");\n/* harmony import */ var _config__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./_config */ \"./public/js/_config.js\");\n\r\n\r\n\r\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (() => {\r\n    try {\r\n        if (window.location.href.includes('payment.html')) {\r\n            const userNameElement = document.getElementById('userName');\r\n            const userLetterElement = document.getElementById('userLetter');\r\n            const userPhoneElement = document.getElementById('userPhone');\r\n            const userTariffElement = document.getElementById('userTariff');\r\n            const userTariffPriceElement = document.getElementById('userTariffPrice');\r\n            const timerElement = document.getElementById('timer');\r\n            let { name, phone, tariff, time } = JSON.parse(localStorage.getItem('user'));\r\n            time = +time || 0;\r\n\r\n            userNameElement.textContent = name;\r\n            userLetterElement.textContent = name?.charAt(0);\r\n            userPhoneElement.textContent = `+${phone?.slice(0, 3)} ${phone?.slice(3, 5)} ${phone?.slice(5, 8)} ${phone?.slice(8, 10)} ${phone?.slice(10, 12)}`\r\n            userTariffElement.textContent = `${ tariff === '1' ? 'STANDARD' : tariff === '2' ? 'PREMIUM' : 'VIP' }`\r\n            userTariffPriceElement.textContent = `${ tariff === '1' ? '897 000' : tariff === '2' ? '1 297 000' : ' 1 497 000' }`\r\n\r\n            const timer = setInterval(() => {\r\n                const now = new Date().getTime();\r\n\r\n                if (now >= time) {\r\n                    clearInterval(timer);\r\n                    (0,_redirect__WEBPACK_IMPORTED_MODULE_0__[\"default\"])('')\r\n                    return;\r\n                }\r\n\r\n                const totalSeconds = Math.floor((time - now) / 1000);\r\n                const minutes = Math.floor(totalSeconds / 60);\r\n                const seconds = totalSeconds - minutes * 60;\r\n\r\n                timerElement.textContent = `${ minutes >= 10 ? minutes : '0' + minutes} : ${ seconds >= 10 ? seconds : '0' + seconds}`\r\n            }, 1000)\r\n\r\n            // Payment screenshot\r\n            const fileInput = document.querySelector('#file-input');\r\n            const fileNameDisplay = document.querySelector('#fileName');\r\n            const purposesLabels = document.querySelectorAll('.selector-radio');\r\n            const continueButton = document.querySelector('#continueButton');\r\n\r\n            let purpose = `To'liq to'ladim`\r\n            purposesLabels.forEach(label => {\r\n                label.addEventListener('change', e => {\r\n                    purpose = e.currentTarget.getAttribute('data-value');\r\n                })\r\n            })\r\n\r\n            let file;\r\n            fileInput.addEventListener('change', e => {\r\n                file = fileInput.files[0];\r\n                fileNameDisplay.textContent = file.name;\r\n            })\r\n\r\n            continueButton.addEventListener('click', async e => {\r\n                if (!file) {\r\n                    alert(`To'lovni tasdiqlovchi skrinshot faylni yuklang`);\r\n                    return;\r\n                }\r\n                const formData = new FormData();\r\n                formData.append('name', name);\r\n                formData.append('phone', phone);\r\n                formData.append('tariff', tariff === '1' ? 'STANDARD' : tariff === '2' ? 'PREMIUM' : 'VIP');\r\n                formData.append('purpose', purpose);\r\n                formData.append('img', file);\r\n\r\n                let response = await fetch(_config__WEBPACK_IMPORTED_MODULE_1__._config.HOST + 'upload-screenshot', {\r\n                    method: 'POST',\r\n                    body: formData\r\n                })\r\n\r\n                response = await response.json();\r\n\r\n                if (!response.ok) {\r\n                    alert(response?.message);\r\n                    return;\r\n                }\r\n\r\n                if (response.ok) {\r\n                    localStorage.setItem('payed', 'true');\r\n                    (0,_redirect__WEBPACK_IMPORTED_MODULE_0__[\"default\"])('complete.html');\r\n                }\r\n            })\r\n        }\r\n    } catch (e) {\r\n    }\r\n});\r\n\n\n//# sourceURL=webpack://registration/./public/js/_payment.js?");

/***/ }),

/***/ "./public/js/_phone.js":
/*!*****************************!*\
  !*** ./public/js/_phone.js ***!
  \*****************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (__WEBPACK_DEFAULT_EXPORT__)\n/* harmony export */ });\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (() => {\r\n    try {\r\n        (function (global, factory) {\r\n            typeof exports === 'object' && \"object\" !== 'undefined' ? factory(exports) :\r\n                typeof define === 'function' && __webpack_require__.amdO ? define(['exports'], factory) :\r\n                    (global = typeof globalThis !== 'undefined' ? globalThis : global || self, factory(global.IMask = {}));\r\n        }(undefined, (function (exports) {\r\n            'use strict';\r\n\r\n            var commonjsGlobal = typeof globalThis !== 'undefined' ? globalThis : typeof window !== 'undefined' ? window : typeof __webpack_require__.g !== 'undefined' ? __webpack_require__.g : typeof self !== 'undefined' ? self : {};\r\n\r\n            function createCommonjsModule(fn) {\r\n                var module = {exports: {}};\r\n                return fn(module, module.exports), module.exports;\r\n            }\r\n\r\n            var check = function (it) {\r\n                return it && it.Math == Math && it;\r\n            }; // https://github.com/zloirock/core-js/issues/86#issuecomment-115759028\r\n\r\n\r\n            var global$1 = // eslint-disable-next-line no-undef\r\n                check(typeof globalThis == 'object' && globalThis) || check(typeof window == 'object' && window) || check(typeof self == 'object' && self) || check(typeof commonjsGlobal == 'object' && commonjsGlobal) || // eslint-disable-next-line no-new-func\r\n                function () {\r\n                    return this;\r\n                }() || Function('return this')();\r\n\r\n            var fails = function (exec) {\r\n                try {\r\n                    return !!exec();\r\n                } catch (error) {\r\n                    return true;\r\n                }\r\n            };\r\n\r\n\r\n            var descriptors = !fails(function () {\r\n                return Object.defineProperty({}, 1, {\r\n                    get: function () {\r\n                        return 7;\r\n                    }\r\n                })[1] != 7;\r\n            });\r\n\r\n            var nativePropertyIsEnumerable = {}.propertyIsEnumerable;\r\n            var getOwnPropertyDescriptor = Object.getOwnPropertyDescriptor; // Nashorn ~ JDK8 bug\r\n\r\n            var NASHORN_BUG = getOwnPropertyDescriptor && !nativePropertyIsEnumerable.call({\r\n                1: 2\r\n            }, 1); // `Object.prototype.propertyIsEnumerable` method implementation\r\n            // https://tc39.es/ecma262/#sec-object.prototype.propertyisenumerable\r\n\r\n            var f = NASHORN_BUG ? function propertyIsEnumerable(V) {\r\n                var descriptor = getOwnPropertyDescriptor(this, V);\r\n                return !!descriptor && descriptor.enumerable;\r\n            } : nativePropertyIsEnumerable;\r\n\r\n            var objectPropertyIsEnumerable = {\r\n                f: f\r\n            };\r\n\r\n            var createPropertyDescriptor = function (bitmap, value) {\r\n                return {\r\n                    enumerable: !(bitmap & 1),\r\n                    configurable: !(bitmap & 2),\r\n                    writable: !(bitmap & 4),\r\n                    value: value\r\n                };\r\n            };\r\n\r\n            var toString = {}.toString;\r\n\r\n            var classofRaw = function (it) {\r\n                return toString.call(it).slice(8, -1);\r\n            };\r\n\r\n            var split = ''.split; // fallback for non-array-like ES3 and non-enumerable old V8 strings\r\n\r\n            var indexedObject = fails(function () {\r\n                // throws an error in rhino, see https://github.com/mozilla/rhino/issues/346\r\n                // eslint-disable-next-line no-prototype-builtins\r\n                return !Object('z').propertyIsEnumerable(0);\r\n            }) ? function (it) {\r\n                return classofRaw(it) == 'String' ? split.call(it, '') : Object(it);\r\n            } : Object;\r\n\r\n            // `RequireObjectCoercible` abstract operation\r\n            // https://tc39.es/ecma262/#sec-requireobjectcoercible\r\n            var requireObjectCoercible = function (it) {\r\n                if (it == undefined) throw TypeError(\"Can't call method on \" + it);\r\n                return it;\r\n            };\r\n\r\n            // toObject with fallback for non-array-like ES3 strings\r\n\r\n\r\n            var toIndexedObject = function (it) {\r\n                return indexedObject(requireObjectCoercible(it));\r\n            };\r\n\r\n            var isObject = function (it) {\r\n                return typeof it === 'object' ? it !== null : typeof it === 'function';\r\n            };\r\n\r\n            // `ToPrimitive` abstract operation\r\n            // https://tc39.es/ecma262/#sec-toprimitive\r\n            // instead of the ES6 spec version, we didn't implement @@toPrimitive case\r\n            // and the second argument - flag - preferred type is a string\r\n\r\n\r\n            var toPrimitive = function (input, PREFERRED_STRING) {\r\n                if (!isObject(input)) return input;\r\n                var fn, val;\r\n                if (PREFERRED_STRING && typeof (fn = input.toString) == 'function' && !isObject(val = fn.call(input))) return val;\r\n                if (typeof (fn = input.valueOf) == 'function' && !isObject(val = fn.call(input))) return val;\r\n                if (!PREFERRED_STRING && typeof (fn = input.toString) == 'function' && !isObject(val = fn.call(input))) return val;\r\n                throw TypeError(\"Can't convert object to primitive value\");\r\n            };\r\n\r\n            var hasOwnProperty = {}.hasOwnProperty;\r\n\r\n            var has = function (it, key) {\r\n                return hasOwnProperty.call(it, key);\r\n            };\r\n\r\n            var document$1 = global$1.document; // typeof document.createElement is 'object' in old IE\r\n\r\n            var EXISTS = isObject(document$1) && isObject(document$1.createElement);\r\n\r\n            var documentCreateElement = function (it) {\r\n                return EXISTS ? document$1.createElement(it) : {};\r\n            };\r\n\r\n            // Thank's IE8 for his funny defineProperty\r\n\r\n\r\n            var ie8DomDefine = !descriptors && !fails(function () {\r\n                return Object.defineProperty(documentCreateElement('div'), 'a', {\r\n                    get: function () {\r\n                        return 7;\r\n                    }\r\n                }).a != 7;\r\n            });\r\n\r\n            var nativeGetOwnPropertyDescriptor = Object.getOwnPropertyDescriptor; // `Object.getOwnPropertyDescriptor` method\r\n            // https://tc39.es/ecma262/#sec-object.getownpropertydescriptor\r\n\r\n            var f$1 = descriptors ? nativeGetOwnPropertyDescriptor : function getOwnPropertyDescriptor(O, P) {\r\n                O = toIndexedObject(O);\r\n                P = toPrimitive(P, true);\r\n                if (ie8DomDefine) try {\r\n                    return nativeGetOwnPropertyDescriptor(O, P);\r\n                } catch (error) {\r\n                    /* empty */\r\n                }\r\n                if (has(O, P)) return createPropertyDescriptor(!objectPropertyIsEnumerable.f.call(O, P), O[P]);\r\n            };\r\n\r\n            var objectGetOwnPropertyDescriptor = {\r\n                f: f$1\r\n            };\r\n\r\n            var anObject = function (it) {\r\n                if (!isObject(it)) {\r\n                    throw TypeError(String(it) + ' is not an object');\r\n                }\r\n\r\n                return it;\r\n            };\r\n\r\n            var nativeDefineProperty = Object.defineProperty; // `Object.defineProperty` method\r\n            // https://tc39.es/ecma262/#sec-object.defineproperty\r\n\r\n            var f$2 = descriptors ? nativeDefineProperty : function defineProperty(O, P, Attributes) {\r\n                anObject(O);\r\n                P = toPrimitive(P, true);\r\n                anObject(Attributes);\r\n                if (ie8DomDefine) try {\r\n                    return nativeDefineProperty(O, P, Attributes);\r\n                } catch (error) {\r\n                    /* empty */\r\n                }\r\n                if ('get' in Attributes || 'set' in Attributes) throw TypeError('Accessors not supported');\r\n                if ('value' in Attributes) O[P] = Attributes.value;\r\n                return O;\r\n            };\r\n\r\n            var objectDefineProperty = {\r\n                f: f$2\r\n            };\r\n\r\n            var createNonEnumerableProperty = descriptors ? function (object, key, value) {\r\n                return objectDefineProperty.f(object, key, createPropertyDescriptor(1, value));\r\n            } : function (object, key, value) {\r\n                object[key] = value;\r\n                return object;\r\n            };\r\n\r\n            var setGlobal = function (key, value) {\r\n                try {\r\n                    createNonEnumerableProperty(global$1, key, value);\r\n                } catch (error) {\r\n                    global$1[key] = value;\r\n                }\r\n\r\n                return value;\r\n            };\r\n\r\n            var SHARED = '__core-js_shared__';\r\n            var store = global$1[SHARED] || setGlobal(SHARED, {});\r\n            var sharedStore = store;\r\n\r\n            var functionToString = Function.toString; // this helper broken in `3.4.1-3.4.4`, so we can't use `shared` helper\r\n\r\n            if (typeof sharedStore.inspectSource != 'function') {\r\n                sharedStore.inspectSource = function (it) {\r\n                    return functionToString.call(it);\r\n                };\r\n            }\r\n\r\n            var inspectSource = sharedStore.inspectSource;\r\n\r\n            var WeakMap = global$1.WeakMap;\r\n            var nativeWeakMap = typeof WeakMap === 'function' && /native code/.test(inspectSource(WeakMap));\r\n\r\n            var shared = createCommonjsModule(function (module) {\r\n                (module.exports = function (key, value) {\r\n                    return sharedStore[key] || (sharedStore[key] = value !== undefined ? value : {});\r\n                })('versions', []).push({\r\n                    version: '3.8.3',\r\n                    mode: 'global',\r\n                    copyright: '© 2021 Denis Pushkarev (zloirock.ru)'\r\n                });\r\n            });\r\n\r\n            var id = 0;\r\n            var postfix = Math.random();\r\n\r\n            var uid = function (key) {\r\n                return 'Symbol(' + String(key === undefined ? '' : key) + ')_' + (++id + postfix).toString(36);\r\n            };\r\n\r\n            var keys = shared('keys');\r\n\r\n            var sharedKey = function (key) {\r\n                return keys[key] || (keys[key] = uid(key));\r\n            };\r\n\r\n            var hiddenKeys = {};\r\n\r\n            var WeakMap$1 = global$1.WeakMap;\r\n            var set, get, has$1;\r\n\r\n            var enforce = function (it) {\r\n                return has$1(it) ? get(it) : set(it, {});\r\n            };\r\n\r\n            var getterFor = function (TYPE) {\r\n                return function (it) {\r\n                    var state;\r\n\r\n                    if (!isObject(it) || (state = get(it)).type !== TYPE) {\r\n                        throw TypeError('Incompatible receiver, ' + TYPE + ' required');\r\n                    }\r\n\r\n                    return state;\r\n                };\r\n            };\r\n\r\n            if (nativeWeakMap) {\r\n                var store$1 = sharedStore.state || (sharedStore.state = new WeakMap$1());\r\n                var wmget = store$1.get;\r\n                var wmhas = store$1.has;\r\n                var wmset = store$1.set;\r\n\r\n                set = function (it, metadata) {\r\n                    metadata.facade = it;\r\n                    wmset.call(store$1, it, metadata);\r\n                    return metadata;\r\n                };\r\n\r\n                get = function (it) {\r\n                    return wmget.call(store$1, it) || {};\r\n                };\r\n\r\n                has$1 = function (it) {\r\n                    return wmhas.call(store$1, it);\r\n                };\r\n            } else {\r\n                var STATE = sharedKey('state');\r\n                hiddenKeys[STATE] = true;\r\n\r\n                set = function (it, metadata) {\r\n                    metadata.facade = it;\r\n                    createNonEnumerableProperty(it, STATE, metadata);\r\n                    return metadata;\r\n                };\r\n\r\n                get = function (it) {\r\n                    return has(it, STATE) ? it[STATE] : {};\r\n                };\r\n\r\n                has$1 = function (it) {\r\n                    return has(it, STATE);\r\n                };\r\n            }\r\n\r\n            var internalState = {\r\n                set: set,\r\n                get: get,\r\n                has: has$1,\r\n                enforce: enforce,\r\n                getterFor: getterFor\r\n            };\r\n\r\n            var redefine = createCommonjsModule(function (module) {\r\n                var getInternalState = internalState.get;\r\n                var enforceInternalState = internalState.enforce;\r\n                var TEMPLATE = String(String).split('String');\r\n                (module.exports = function (O, key, value, options) {\r\n                    var unsafe = options ? !!options.unsafe : false;\r\n                    var simple = options ? !!options.enumerable : false;\r\n                    var noTargetGet = options ? !!options.noTargetGet : false;\r\n                    var state;\r\n\r\n                    if (typeof value == 'function') {\r\n                        if (typeof key == 'string' && !has(value, 'name')) {\r\n                            createNonEnumerableProperty(value, 'name', key);\r\n                        }\r\n\r\n                        state = enforceInternalState(value);\r\n\r\n                        if (!state.source) {\r\n                            state.source = TEMPLATE.join(typeof key == 'string' ? key : '');\r\n                        }\r\n                    }\r\n\r\n                    if (O === global$1) {\r\n                        if (simple) O[key] = value; else setGlobal(key, value);\r\n                        return;\r\n                    } else if (!unsafe) {\r\n                        delete O[key];\r\n                    } else if (!noTargetGet && O[key]) {\r\n                        simple = true;\r\n                    }\r\n\r\n                    if (simple) O[key] = value; else createNonEnumerableProperty(O, key, value); // add fake Function#toString for correct work wrapped methods / constructors with methods like LoDash isNative\r\n                })(Function.prototype, 'toString', function toString() {\r\n                    return typeof this == 'function' && getInternalState(this).source || inspectSource(this);\r\n                });\r\n            });\r\n\r\n            var path = global$1;\r\n\r\n            var aFunction = function (variable) {\r\n                return typeof variable == 'function' ? variable : undefined;\r\n            };\r\n\r\n            var getBuiltIn = function (namespace, method) {\r\n                return arguments.length < 2 ? aFunction(path[namespace]) || aFunction(global$1[namespace]) : path[namespace] && path[namespace][method] || global$1[namespace] && global$1[namespace][method];\r\n            };\r\n\r\n            var ceil = Math.ceil;\r\n            var floor = Math.floor; // `ToInteger` abstract operation\r\n            // https://tc39.es/ecma262/#sec-tointeger\r\n\r\n            var toInteger = function (argument) {\r\n                return isNaN(argument = +argument) ? 0 : (argument > 0 ? floor : ceil)(argument);\r\n            };\r\n\r\n            var min = Math.min; // `ToLength` abstract operation\r\n            // https://tc39.es/ecma262/#sec-tolength\r\n\r\n            var toLength = function (argument) {\r\n                return argument > 0 ? min(toInteger(argument), 0x1FFFFFFFFFFFFF) : 0; // 2 ** 53 - 1 == 9007199254740991\r\n            };\r\n\r\n            var max = Math.max;\r\n            var min$1 = Math.min; // Helper for a popular repeating case of the spec:\r\n            // Let integer be ? ToInteger(index).\r\n            // If integer < 0, let result be max((length + integer), 0); else let result be min(integer, length).\r\n\r\n            var toAbsoluteIndex = function (index, length) {\r\n                var integer = toInteger(index);\r\n                return integer < 0 ? max(integer + length, 0) : min$1(integer, length);\r\n            };\r\n\r\n            // `Array.prototype.{ indexOf, includes }` methods implementation\r\n\r\n\r\n            var createMethod = function (IS_INCLUDES) {\r\n                return function ($this, el, fromIndex) {\r\n                    var O = toIndexedObject($this);\r\n                    var length = toLength(O.length);\r\n                    var index = toAbsoluteIndex(fromIndex, length);\r\n                    var value; // Array#includes uses SameValueZero equality algorithm\r\n                    // eslint-disable-next-line no-self-compare\r\n\r\n                    if (IS_INCLUDES && el != el) while (length > index) {\r\n                        value = O[index++]; // eslint-disable-next-line no-self-compare\r\n\r\n                        if (value != value) return true; // Array#indexOf ignores holes, Array#includes - not\r\n                    } else for (; length > index; index++) {\r\n                        if ((IS_INCLUDES || index in O) && O[index] === el) return IS_INCLUDES || index || 0;\r\n                    }\r\n                    return !IS_INCLUDES && -1;\r\n                };\r\n            };\r\n\r\n            var arrayIncludes = {\r\n                // `Array.prototype.includes` method\r\n                // https://tc39.es/ecma262/#sec-array.prototype.includes\r\n                includes: createMethod(true),\r\n                // `Array.prototype.indexOf` method\r\n                // https://tc39.es/ecma262/#sec-array.prototype.indexof\r\n                indexOf: createMethod(false)\r\n            };\r\n\r\n            var indexOf = arrayIncludes.indexOf;\r\n\r\n\r\n            var objectKeysInternal = function (object, names) {\r\n                var O = toIndexedObject(object);\r\n                var i = 0;\r\n                var result = [];\r\n                var key;\r\n\r\n                for (key in O) !has(hiddenKeys, key) && has(O, key) && result.push(key); // Don't enum bug & hidden keys\r\n\r\n\r\n                while (names.length > i) if (has(O, key = names[i++])) {\r\n                    ~indexOf(result, key) || result.push(key);\r\n                }\r\n\r\n                return result;\r\n            };\r\n\r\n            // IE8- don't enum bug keys\r\n            var enumBugKeys = ['constructor', 'hasOwnProperty', 'isPrototypeOf', 'propertyIsEnumerable', 'toLocaleString', 'toString', 'valueOf'];\r\n\r\n            var hiddenKeys$1 = enumBugKeys.concat('length', 'prototype'); // `Object.getOwnPropertyNames` method\r\n            // https://tc39.es/ecma262/#sec-object.getownpropertynames\r\n\r\n            var f$3 = Object.getOwnPropertyNames || function getOwnPropertyNames(O) {\r\n                return objectKeysInternal(O, hiddenKeys$1);\r\n            };\r\n\r\n            var objectGetOwnPropertyNames = {\r\n                f: f$3\r\n            };\r\n\r\n            var f$4 = Object.getOwnPropertySymbols;\r\n\r\n            var objectGetOwnPropertySymbols = {\r\n                f: f$4\r\n            };\r\n\r\n            // all object keys, includes non-enumerable and symbols\r\n\r\n\r\n            var ownKeys = getBuiltIn('Reflect', 'ownKeys') || function ownKeys(it) {\r\n                var keys = objectGetOwnPropertyNames.f(anObject(it));\r\n                var getOwnPropertySymbols = objectGetOwnPropertySymbols.f;\r\n                return getOwnPropertySymbols ? keys.concat(getOwnPropertySymbols(it)) : keys;\r\n            };\r\n\r\n            var copyConstructorProperties = function (target, source) {\r\n                var keys = ownKeys(source);\r\n                var defineProperty = objectDefineProperty.f;\r\n                var getOwnPropertyDescriptor = objectGetOwnPropertyDescriptor.f;\r\n\r\n                for (var i = 0; i < keys.length; i++) {\r\n                    var key = keys[i];\r\n                    if (!has(target, key)) defineProperty(target, key, getOwnPropertyDescriptor(source, key));\r\n                }\r\n            };\r\n\r\n            var replacement = /#|\\.prototype\\./;\r\n\r\n            var isForced = function (feature, detection) {\r\n                var value = data[normalize(feature)];\r\n                return value == POLYFILL ? true : value == NATIVE ? false : typeof detection == 'function' ? fails(detection) : !!detection;\r\n            };\r\n\r\n            var normalize = isForced.normalize = function (string) {\r\n                return String(string).replace(replacement, '.').toLowerCase();\r\n            };\r\n\r\n            var data = isForced.data = {};\r\n            var NATIVE = isForced.NATIVE = 'N';\r\n            var POLYFILL = isForced.POLYFILL = 'P';\r\n            var isForced_1 = isForced;\r\n\r\n            var getOwnPropertyDescriptor$1 = objectGetOwnPropertyDescriptor.f;\r\n\r\n\r\n\r\n            var _export = function (options, source) {\r\n                var TARGET = options.target;\r\n                var GLOBAL = options.global;\r\n                var STATIC = options.stat;\r\n                var FORCED, target, key, targetProperty, sourceProperty, descriptor;\r\n\r\n                if (GLOBAL) {\r\n                    target = global$1;\r\n                } else if (STATIC) {\r\n                    target = global$1[TARGET] || setGlobal(TARGET, {});\r\n                } else {\r\n                    target = (global$1[TARGET] || {}).prototype;\r\n                }\r\n\r\n                if (target) for (key in source) {\r\n                    sourceProperty = source[key];\r\n\r\n                    if (options.noTargetGet) {\r\n                        descriptor = getOwnPropertyDescriptor$1(target, key);\r\n                        targetProperty = descriptor && descriptor.value;\r\n                    } else targetProperty = target[key];\r\n\r\n                    FORCED = isForced_1(GLOBAL ? key : TARGET + (STATIC ? '.' : '#') + key, options.forced); // contained in target\r\n\r\n                    if (!FORCED && targetProperty !== undefined) {\r\n                        if (typeof sourceProperty === typeof targetProperty) continue;\r\n                        copyConstructorProperties(sourceProperty, targetProperty);\r\n                    } // add a flag to not completely full polyfills\r\n\r\n\r\n                    if (options.sham || targetProperty && targetProperty.sham) {\r\n                        createNonEnumerableProperty(sourceProperty, 'sham', true);\r\n                    } // extend global\r\n\r\n\r\n                    redefine(target, key, sourceProperty, options);\r\n                }\r\n            };\r\n\r\n            // `Object.keys` method\r\n            // https://tc39.es/ecma262/#sec-object.keys\r\n\r\n\r\n            var objectKeys = Object.keys || function keys(O) {\r\n                return objectKeysInternal(O, enumBugKeys);\r\n            };\r\n\r\n            // `ToObject` abstract operation\r\n            // https://tc39.es/ecma262/#sec-toobject\r\n\r\n\r\n            var toObject = function (argument) {\r\n                return Object(requireObjectCoercible(argument));\r\n            };\r\n\r\n            var nativeAssign = Object.assign;\r\n            var defineProperty = Object.defineProperty; // `Object.assign` method\r\n            // https://tc39.es/ecma262/#sec-object.assign\r\n\r\n            var objectAssign = !nativeAssign || fails(function () {\r\n                // should have correct order of operations (Edge bug)\r\n                if (descriptors && nativeAssign({\r\n                    b: 1\r\n                }, nativeAssign(defineProperty({}, 'a', {\r\n                    enumerable: true,\r\n                    get: function () {\r\n                        defineProperty(this, 'b', {\r\n                            value: 3,\r\n                            enumerable: false\r\n                        });\r\n                    }\r\n                }), {\r\n                    b: 2\r\n                })).b !== 1) return true; // should work with symbols and should have deterministic property order (V8 bug)\r\n\r\n                var A = {};\r\n                var B = {}; // eslint-disable-next-line no-undef\r\n\r\n                var symbol = Symbol();\r\n                var alphabet = 'abcdefghijklmnopqrst';\r\n                A[symbol] = 7;\r\n                alphabet.split('').forEach(function (chr) {\r\n                    B[chr] = chr;\r\n                });\r\n                return nativeAssign({}, A)[symbol] != 7 || objectKeys(nativeAssign({}, B)).join('') != alphabet;\r\n            }) ? function assign(target, source) {\r\n                // eslint-disable-line no-unused-vars\r\n                var T = toObject(target);\r\n                var argumentsLength = arguments.length;\r\n                var index = 1;\r\n                var getOwnPropertySymbols = objectGetOwnPropertySymbols.f;\r\n                var propertyIsEnumerable = objectPropertyIsEnumerable.f;\r\n\r\n                while (argumentsLength > index) {\r\n                    var S = indexedObject(arguments[index++]);\r\n                    var keys = getOwnPropertySymbols ? objectKeys(S).concat(getOwnPropertySymbols(S)) : objectKeys(S);\r\n                    var length = keys.length;\r\n                    var j = 0;\r\n                    var key;\r\n\r\n                    while (length > j) {\r\n                        key = keys[j++];\r\n                        if (!descriptors || propertyIsEnumerable.call(S, key)) T[key] = S[key];\r\n                    }\r\n                }\r\n\r\n                return T;\r\n            } : nativeAssign;\r\n\r\n            // `Object.assign` method\r\n            // https://tc39.es/ecma262/#sec-object.assign\r\n\r\n\r\n            _export({\r\n                target: 'Object',\r\n                stat: true,\r\n                forced: Object.assign !== objectAssign\r\n            }, {\r\n                assign: objectAssign\r\n            });\r\n\r\n            // `String.prototype.repeat` method implementation\r\n            // https://tc39.es/ecma262/#sec-string.prototype.repeat\r\n\r\n\r\n            var stringRepeat = ''.repeat || function repeat(count) {\r\n                var str = String(requireObjectCoercible(this));\r\n                var result = '';\r\n                var n = toInteger(count);\r\n                if (n < 0 || n == Infinity) throw RangeError('Wrong number of repetitions');\r\n\r\n                for (; n > 0; (n >>>= 1) && (str += str)) if (n & 1) result += str;\r\n\r\n                return result;\r\n            };\r\n\r\n            // https://github.com/tc39/proposal-string-pad-start-end\r\n\r\n\r\n            var ceil$1 = Math.ceil; // `String.prototype.{ padStart, padEnd }` methods implementation\r\n\r\n            var createMethod$1 = function (IS_END) {\r\n                return function ($this, maxLength, fillString) {\r\n                    var S = String(requireObjectCoercible($this));\r\n                    var stringLength = S.length;\r\n                    var fillStr = fillString === undefined ? ' ' : String(fillString);\r\n                    var intMaxLength = toLength(maxLength);\r\n                    var fillLen, stringFiller;\r\n                    if (intMaxLength <= stringLength || fillStr == '') return S;\r\n                    fillLen = intMaxLength - stringLength;\r\n                    stringFiller = stringRepeat.call(fillStr, ceil$1(fillLen / fillStr.length));\r\n                    if (stringFiller.length > fillLen) stringFiller = stringFiller.slice(0, fillLen);\r\n                    return IS_END ? S + stringFiller : stringFiller + S;\r\n                };\r\n            };\r\n\r\n            var stringPad = {\r\n                // `String.prototype.padStart` method\r\n                // https://tc39.es/ecma262/#sec-string.prototype.padstart\r\n                start: createMethod$1(false),\r\n                // `String.prototype.padEnd` method\r\n                // https://tc39.es/ecma262/#sec-string.prototype.padend\r\n                end: createMethod$1(true)\r\n            };\r\n\r\n            var engineUserAgent = getBuiltIn('navigator', 'userAgent') || '';\r\n\r\n            // https://github.com/zloirock/core-js/issues/280\r\n            // eslint-disable-next-line unicorn/no-unsafe-regex\r\n\r\n\r\n            var stringPadWebkitBug = /Version\\/10\\.\\d+(\\.\\d+)?( Mobile\\/\\w+)? Safari\\//.test(engineUserAgent);\r\n\r\n            var $padEnd = stringPad.end;\r\n\r\n            // `String.prototype.padEnd` method\r\n            // https://tc39.es/ecma262/#sec-string.prototype.padend\r\n\r\n\r\n            _export({\r\n                target: 'String',\r\n                proto: true,\r\n                forced: stringPadWebkitBug\r\n            }, {\r\n                padEnd: function padEnd(maxLength\r\n                                        /* , fillString = ' ' */\r\n                ) {\r\n                    return $padEnd(this, maxLength, arguments.length > 1 ? arguments[1] : undefined);\r\n                }\r\n            });\r\n\r\n            var $padStart = stringPad.start;\r\n\r\n            // `String.prototype.padStart` method\r\n            // https://tc39.es/ecma262/#sec-string.prototype.padstart\r\n\r\n\r\n            _export({\r\n                target: 'String',\r\n                proto: true,\r\n                forced: stringPadWebkitBug\r\n            }, {\r\n                padStart: function padStart(maxLength\r\n                                            /* , fillString = ' ' */\r\n                ) {\r\n                    return $padStart(this, maxLength, arguments.length > 1 ? arguments[1] : undefined);\r\n                }\r\n            });\r\n\r\n            _export({\r\n                target: 'String',\r\n                proto: true\r\n            }, {\r\n                repeat: stringRepeat\r\n            });\r\n\r\n            _export({\r\n                global: true\r\n            }, {\r\n                globalThis: global$1\r\n            });\r\n\r\n            function _typeof(obj) {\r\n                \"@babel/helpers - typeof\";\r\n\r\n                if (typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\") {\r\n                    _typeof = function (obj) {\r\n                        return typeof obj;\r\n                    };\r\n                } else {\r\n                    _typeof = function (obj) {\r\n                        return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj;\r\n                    };\r\n                }\r\n\r\n                return _typeof(obj);\r\n            }\r\n\r\n            function _classCallCheck(instance, Constructor) {\r\n                if (!(instance instanceof Constructor)) {\r\n                    throw new TypeError(\"Cannot call a class as a function\");\r\n                }\r\n            }\r\n\r\n            function _defineProperties(target, props) {\r\n                for (var i = 0; i < props.length; i++) {\r\n                    var descriptor = props[i];\r\n                    descriptor.enumerable = descriptor.enumerable || false;\r\n                    descriptor.configurable = true;\r\n                    if (\"value\" in descriptor) descriptor.writable = true;\r\n                    Object.defineProperty(target, descriptor.key, descriptor);\r\n                }\r\n            }\r\n\r\n            function _createClass(Constructor, protoProps, staticProps) {\r\n                if (protoProps) _defineProperties(Constructor.prototype, protoProps);\r\n                if (staticProps) _defineProperties(Constructor, staticProps);\r\n                return Constructor;\r\n            }\r\n\r\n            function _defineProperty(obj, key, value) {\r\n                if (key in obj) {\r\n                    Object.defineProperty(obj, key, {\r\n                        value: value,\r\n                        enumerable: true,\r\n                        configurable: true,\r\n                        writable: true\r\n                    });\r\n                } else {\r\n                    obj[key] = value;\r\n                }\r\n\r\n                return obj;\r\n            }\r\n\r\n            function _inherits(subClass, superClass) {\r\n                if (typeof superClass !== \"function\" && superClass !== null) {\r\n                    throw new TypeError(\"Super expression must either be null or a function\");\r\n                }\r\n\r\n                subClass.prototype = Object.create(superClass && superClass.prototype, {\r\n                    constructor: {\r\n                        value: subClass,\r\n                        writable: true,\r\n                        configurable: true\r\n                    }\r\n                });\r\n                if (superClass) _setPrototypeOf(subClass, superClass);\r\n            }\r\n\r\n            function _getPrototypeOf(o) {\r\n                _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) {\r\n                    return o.__proto__ || Object.getPrototypeOf(o);\r\n                };\r\n                return _getPrototypeOf(o);\r\n            }\r\n\r\n            function _setPrototypeOf(o, p) {\r\n                _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) {\r\n                    o.__proto__ = p;\r\n                    return o;\r\n                };\r\n\r\n                return _setPrototypeOf(o, p);\r\n            }\r\n\r\n            function _isNativeReflectConstruct() {\r\n                if (typeof Reflect === \"undefined\" || !Reflect.construct) return false;\r\n                if (Reflect.construct.sham) return false;\r\n                if (typeof Proxy === \"function\") return true;\r\n\r\n                try {\r\n                    Date.prototype.toString.call(Reflect.construct(Date, [], function () {\r\n                    }));\r\n                    return true;\r\n                } catch (e) {\r\n                    return false;\r\n                }\r\n            }\r\n\r\n            function _objectWithoutPropertiesLoose(source, excluded) {\r\n                if (source == null) return {};\r\n                var target = {};\r\n                var sourceKeys = Object.keys(source);\r\n                var key, i;\r\n\r\n                for (i = 0; i < sourceKeys.length; i++) {\r\n                    key = sourceKeys[i];\r\n                    if (excluded.indexOf(key) >= 0) continue;\r\n                    target[key] = source[key];\r\n                }\r\n\r\n                return target;\r\n            }\r\n\r\n            function _objectWithoutProperties(source, excluded) {\r\n                if (source == null) return {};\r\n\r\n                var target = _objectWithoutPropertiesLoose(source, excluded);\r\n\r\n                var key, i;\r\n\r\n                if (Object.getOwnPropertySymbols) {\r\n                    var sourceSymbolKeys = Object.getOwnPropertySymbols(source);\r\n\r\n                    for (i = 0; i < sourceSymbolKeys.length; i++) {\r\n                        key = sourceSymbolKeys[i];\r\n                        if (excluded.indexOf(key) >= 0) continue;\r\n                        if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue;\r\n                        target[key] = source[key];\r\n                    }\r\n                }\r\n\r\n                return target;\r\n            }\r\n\r\n            function _assertThisInitialized(self) {\r\n                if (self === void 0) {\r\n                    throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\");\r\n                }\r\n\r\n                return self;\r\n            }\r\n\r\n            function _possibleConstructorReturn(self, call) {\r\n                if (call && (typeof call === \"object\" || typeof call === \"function\")) {\r\n                    return call;\r\n                }\r\n\r\n                return _assertThisInitialized(self);\r\n            }\r\n\r\n            function _createSuper(Derived) {\r\n                var hasNativeReflectConstruct = _isNativeReflectConstruct();\r\n\r\n                return function _createSuperInternal() {\r\n                    var Super = _getPrototypeOf(Derived),\r\n                        result;\r\n\r\n                    if (hasNativeReflectConstruct) {\r\n                        var NewTarget = _getPrototypeOf(this).constructor;\r\n\r\n                        result = Reflect.construct(Super, arguments, NewTarget);\r\n                    } else {\r\n                        result = Super.apply(this, arguments);\r\n                    }\r\n\r\n                    return _possibleConstructorReturn(this, result);\r\n                };\r\n            }\r\n\r\n            function _superPropBase(object, property) {\r\n                while (!Object.prototype.hasOwnProperty.call(object, property)) {\r\n                    object = _getPrototypeOf(object);\r\n                    if (object === null) break;\r\n                }\r\n\r\n                return object;\r\n            }\r\n\r\n            function _get(target, property, receiver) {\r\n                if (typeof Reflect !== \"undefined\" && Reflect.get) {\r\n                    _get = Reflect.get;\r\n                } else {\r\n                    _get = function _get(target, property, receiver) {\r\n                        var base = _superPropBase(target, property);\r\n\r\n                        if (!base) return;\r\n                        var desc = Object.getOwnPropertyDescriptor(base, property);\r\n\r\n                        if (desc.get) {\r\n                            return desc.get.call(receiver);\r\n                        }\r\n\r\n                        return desc.value;\r\n                    };\r\n                }\r\n\r\n                return _get(target, property, receiver || target);\r\n            }\r\n\r\n            function set$1(target, property, value, receiver) {\r\n                if (typeof Reflect !== \"undefined\" && Reflect.set) {\r\n                    set$1 = Reflect.set;\r\n                } else {\r\n                    set$1 = function set(target, property, value, receiver) {\r\n                        var base = _superPropBase(target, property);\r\n\r\n                        var desc;\r\n\r\n                        if (base) {\r\n                            desc = Object.getOwnPropertyDescriptor(base, property);\r\n\r\n                            if (desc.set) {\r\n                                desc.set.call(receiver, value);\r\n                                return true;\r\n                            } else if (!desc.writable) {\r\n                                return false;\r\n                            }\r\n                        }\r\n\r\n                        desc = Object.getOwnPropertyDescriptor(receiver, property);\r\n\r\n                        if (desc) {\r\n                            if (!desc.writable) {\r\n                                return false;\r\n                            }\r\n\r\n                            desc.value = value;\r\n                            Object.defineProperty(receiver, property, desc);\r\n                        } else {\r\n                            _defineProperty(receiver, property, value);\r\n                        }\r\n\r\n                        return true;\r\n                    };\r\n                }\r\n\r\n                return set$1(target, property, value, receiver);\r\n            }\r\n\r\n            function _set(target, property, value, receiver, isStrict) {\r\n                var s = set$1(target, property, value, receiver || target);\r\n\r\n                if (!s && isStrict) {\r\n                    throw new Error('failed to set property');\r\n                }\r\n\r\n                return value;\r\n            }\r\n\r\n            function _slicedToArray(arr, i) {\r\n                return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _unsupportedIterableToArray(arr, i) || _nonIterableRest();\r\n            }\r\n\r\n            function _arrayWithHoles(arr) {\r\n                if (Array.isArray(arr)) return arr;\r\n            }\r\n\r\n            function _iterableToArrayLimit(arr, i) {\r\n                if (typeof Symbol === \"undefined\" || !(Symbol.iterator in Object(arr))) return;\r\n                var _arr = [];\r\n                var _n = true;\r\n                var _d = false;\r\n                var _e = undefined;\r\n\r\n                try {\r\n                    for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) {\r\n                        _arr.push(_s.value);\r\n\r\n                        if (i && _arr.length === i) break;\r\n                    }\r\n                } catch (err) {\r\n                    _d = true;\r\n                    _e = err;\r\n                } finally {\r\n                    try {\r\n                        if (!_n && _i[\"return\"] != null) _i[\"return\"]();\r\n                    } finally {\r\n                        if (_d) throw _e;\r\n                    }\r\n                }\r\n\r\n                return _arr;\r\n            }\r\n\r\n            function _unsupportedIterableToArray(o, minLen) {\r\n                if (!o) return;\r\n                if (typeof o === \"string\") return _arrayLikeToArray(o, minLen);\r\n                var n = Object.prototype.toString.call(o).slice(8, -1);\r\n                if (n === \"Object\" && o.constructor) n = o.constructor.name;\r\n                if (n === \"Map\" || n === \"Set\") return Array.from(o);\r\n                if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen);\r\n            }\r\n\r\n            function _arrayLikeToArray(arr, len) {\r\n                if (len == null || len > arr.length) len = arr.length;\r\n\r\n                for (var i = 0, arr2 = new Array(len); i < len; i++) arr2[i] = arr[i];\r\n\r\n                return arr2;\r\n            }\r\n\r\n            function _nonIterableRest() {\r\n                throw new TypeError(\"Invalid attempt to destructure non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\");\r\n            }\r\n\r\n            /** Checks if value is string */\r\n            function isString(str) {\r\n                return typeof str === 'string' || str instanceof String;\r\n            }\r\n            var DIRECTION = {\r\n                NONE: 'NONE',\r\n                LEFT: 'LEFT',\r\n                FORCE_LEFT: 'FORCE_LEFT',\r\n                RIGHT: 'RIGHT',\r\n                FORCE_RIGHT: 'FORCE_RIGHT'\r\n            };\r\n\r\n            /** */\r\n\r\n            function forceDirection(direction) {\r\n                switch (direction) {\r\n                    case DIRECTION.LEFT:\r\n                        return DIRECTION.FORCE_LEFT;\r\n\r\n                    case DIRECTION.RIGHT:\r\n                        return DIRECTION.FORCE_RIGHT;\r\n\r\n                    default:\r\n                        return direction;\r\n                }\r\n            }\r\n\r\n            /** Escapes regular expression control chars */\r\n\r\n            function escapeRegExp(str) {\r\n                return str.replace(/([.*+?^=!:${}()|[\\]\\/\\\\])/g, '\\\\$1');\r\n            } // cloned from https://github.com/epoberezkin/fast-deep-equal with small changes\r\n\r\n            function objectIncludes(b, a) {\r\n                if (a === b) return true;\r\n                var arrA = Array.isArray(a),\r\n                    arrB = Array.isArray(b),\r\n                    i;\r\n\r\n                if (arrA && arrB) {\r\n                    if (a.length != b.length) return false;\r\n\r\n                    for (i = 0; i < a.length; i++) {\r\n                        if (!objectIncludes(a[i], b[i])) return false;\r\n                    }\r\n\r\n                    return true;\r\n                }\r\n\r\n                if (arrA != arrB) return false;\r\n\r\n                if (a && b && _typeof(a) === 'object' && _typeof(b) === 'object') {\r\n                    var dateA = a instanceof Date,\r\n                        dateB = b instanceof Date;\r\n                    if (dateA && dateB) return a.getTime() == b.getTime();\r\n                    if (dateA != dateB) return false;\r\n                    var regexpA = a instanceof RegExp,\r\n                        regexpB = b instanceof RegExp;\r\n                    if (regexpA && regexpB) return a.toString() == b.toString();\r\n                    if (regexpA != regexpB) return false;\r\n                    var keys = Object.keys(a); // if (keys.length !== Object.keys(b).length) return false;\r\n\r\n                    for (i = 0; i < keys.length; i++) {\r\n                        if (!Object.prototype.hasOwnProperty.call(b, keys[i])) return false;\r\n                    }\r\n\r\n                    for (i = 0; i < keys.length; i++) {\r\n                        if (!objectIncludes(b[keys[i]], a[keys[i]])) return false;\r\n                    }\r\n\r\n                    return true;\r\n                } else if (a && b && typeof a === 'function' && typeof b === 'function') {\r\n                    return a.toString() === b.toString();\r\n                }\r\n\r\n                return false;\r\n            }\r\n\r\n            /** Selection range */\r\n\r\n            /** Provides details of changing input */\r\n\r\n            var ActionDetails = /*#__PURE__*/function () {\r\n                function ActionDetails(value, cursorPos, oldValue, oldSelection) {\r\n                    _classCallCheck(this, ActionDetails);\r\n\r\n                    this.value = value;\r\n                    this.cursorPos = cursorPos;\r\n                    this.oldValue = oldValue;\r\n                    this.oldSelection = oldSelection; // double check if left part was changed (autofilling, other non-standard input triggers)\r\n\r\n                    while (this.value.slice(0, this.startChangePos) !== this.oldValue.slice(0, this.startChangePos)) {\r\n                        --this.oldSelection.start;\r\n                    }\r\n                }\r\n\r\n                /**\r\n                 Start changing position\r\n                 @readonly\r\n                 */\r\n\r\n\r\n                _createClass(ActionDetails, [{\r\n                    key: \"startChangePos\",\r\n                    get: function get() {\r\n                        return Math.min(this.cursorPos, this.oldSelection.start);\r\n                    }\r\n                    /**\r\n                     Inserted symbols count\r\n                     @readonly\r\n                     */\r\n\r\n                }, {\r\n                    key: \"insertedCount\",\r\n                    get: function get() {\r\n                        return this.cursorPos - this.startChangePos;\r\n                    }\r\n                    /**\r\n                     Inserted symbols\r\n                     @readonly\r\n                     */\r\n\r\n                }, {\r\n                    key: \"inserted\",\r\n                    get: function get() {\r\n                        return this.value.substr(this.startChangePos, this.insertedCount);\r\n                    }\r\n\r\n                }, {\r\n                    key: \"removedCount\",\r\n                    get: function get() {\r\n                        // Math.max for opposite operation\r\n                        return Math.max(this.oldSelection.end - this.startChangePos || // for Delete\r\n                            this.oldValue.length - this.value.length, 0);\r\n                    }\r\n                    /**\r\n                     Removed symbols\r\n                     @readonly\r\n                     */\r\n\r\n                }, {\r\n                    key: \"removed\",\r\n                    get: function get() {\r\n                        return this.oldValue.substr(this.startChangePos, this.removedCount);\r\n                    }\r\n                    /**\r\n                     Unchanged head symbols\r\n                     @readonly\r\n                     */\r\n\r\n                }, {\r\n                    key: \"head\",\r\n                    get: function get() {\r\n                        return this.value.substring(0, this.startChangePos);\r\n                    }\r\n                    /**\r\n                     Unchanged tail symbols\r\n                     @readonly\r\n                     */\r\n\r\n                }, {\r\n                    key: \"tail\",\r\n                    get: function get() {\r\n                        return this.value.substring(this.startChangePos + this.insertedCount);\r\n                    }\r\n                    /**\r\n                     Remove direction\r\n                     @readonly\r\n                     */\r\n\r\n                }, {\r\n                    key: \"removeDirection\",\r\n                    get: function get() {\r\n                        if (!this.removedCount || this.insertedCount) return DIRECTION.NONE; // align right if delete at right or if range removed (event with backspace)\r\n\r\n                        return this.oldSelection.end === this.cursorPos || this.oldSelection.start === this.cursorPos ? DIRECTION.RIGHT : DIRECTION.LEFT;\r\n                    }\r\n                }]);\r\n\r\n                return ActionDetails;\r\n            }();\r\n\r\n            var ChangeDetails = /*#__PURE__*/function () {\r\n                /** Inserted symbols */\r\n\r\n                /** Can skip chars */\r\n\r\n                /** Additional offset if any changes occurred before tail */\r\n\r\n                /** Raw inserted is used by dynamic mask */\r\n                function ChangeDetails(details) {\r\n                    _classCallCheck(this, ChangeDetails);\r\n\r\n                    Object.assign(this, {\r\n                        inserted: '',\r\n                        rawInserted: '',\r\n                        skip: false,\r\n                        tailShift: 0\r\n                    }, details);\r\n                }\r\n\r\n                /**\r\n                 Aggregate changes\r\n                 @returns {ChangeDetails} `this`\r\n                 */\r\n\r\n\r\n                _createClass(ChangeDetails, [{\r\n                    key: \"aggregate\",\r\n                    value: function aggregate(details) {\r\n                        this.rawInserted += details.rawInserted;\r\n                        this.skip = this.skip || details.skip;\r\n                        this.inserted += details.inserted;\r\n                        this.tailShift += details.tailShift;\r\n                        return this;\r\n                    }\r\n                    /** Total offset considering all changes */\r\n\r\n                }, {\r\n                    key: \"offset\",\r\n                    get: function get() {\r\n                        return this.tailShift + this.inserted.length;\r\n                    }\r\n                }]);\r\n\r\n                return ChangeDetails;\r\n            }();\r\n\r\n            /** Provides details of continuous extracted tail */\r\n            var ContinuousTailDetails = /*#__PURE__*/function () {\r\n                function ContinuousTailDetails() {\r\n                    var value = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : '';\r\n                    var from = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;\r\n                    var stop = arguments.length > 2 ? arguments[2] : undefined;\r\n\r\n                    _classCallCheck(this, ContinuousTailDetails);\r\n\r\n                    this.value = value;\r\n                    this.from = from;\r\n                    this.stop = stop;\r\n                }\r\n\r\n                _createClass(ContinuousTailDetails, [{\r\n                    key: \"toString\",\r\n                    value: function toString() {\r\n                        return this.value;\r\n                    }\r\n                }, {\r\n                    key: \"extend\",\r\n                    value: function extend(tail) {\r\n                        this.value += String(tail);\r\n                    }\r\n                }, {\r\n                    key: \"appendTo\",\r\n                    value: function appendTo(masked) {\r\n                        return masked.append(this.toString(), {\r\n                            tail: true\r\n                        }).aggregate(masked._appendPlaceholder());\r\n                    }\r\n                }, {\r\n                    key: \"state\",\r\n                    get: function get() {\r\n                        return {\r\n                            value: this.value,\r\n                            from: this.from,\r\n                            stop: this.stop\r\n                        };\r\n                    },\r\n                    set: function set(state) {\r\n                        Object.assign(this, state);\r\n                    }\r\n                }, {\r\n                    key: \"shiftBefore\",\r\n                    value: function shiftBefore(pos) {\r\n                        if (this.from >= pos || !this.value.length) return '';\r\n                        var shiftChar = this.value[0];\r\n                        this.value = this.value.slice(1);\r\n                        return shiftChar;\r\n                    }\r\n                }]);\r\n\r\n                return ContinuousTailDetails;\r\n            }();\r\n\r\n            /**\r\n             * Applies mask on element.\r\n             * @constructor\r\n             * @param {HTMLInputElement|HTMLTextAreaElement|MaskElement} el - Element to apply mask\r\n             * @param {Object} opts - Custom mask options\r\n             * @return {InputMask}\r\n             */\r\n            function IMask(el) {\r\n                var opts = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\r\n                // currently available only for input-like elements\r\n                return new IMask.InputMask(el, opts);\r\n            }\r\n\r\n            /** Supported mask type */\r\n\r\n            /** Provides common masking stuff */\r\n            var Masked = /*#__PURE__*/function () {\r\n                function Masked(opts) {\r\n                    _classCallCheck(this, Masked);\r\n\r\n                    this._value = '';\r\n\r\n                    this._update(Object.assign({}, Masked.DEFAULTS, opts));\r\n\r\n                    this.isInitialized = true;\r\n                }\r\n\r\n                /** Sets and applies new options */\r\n\r\n\r\n                _createClass(Masked, [{\r\n                    key: \"updateOptions\",\r\n                    value: function updateOptions(opts) {\r\n                        if (!Object.keys(opts).length) return;\r\n                        this.withValueRefresh(this._update.bind(this, opts));\r\n                    }\r\n                    /**\r\n                     Sets new options\r\n                     @protected\r\n                     */\r\n\r\n                }, {\r\n                    key: \"_update\",\r\n                    value: function _update(opts) {\r\n                        Object.assign(this, opts);\r\n                    }\r\n                    /** Mask state */\r\n\r\n                }, {\r\n                    key: \"state\",\r\n                    get: function get() {\r\n                        return {\r\n                            _value: this.value\r\n                        };\r\n                    },\r\n                    set: function set(state) {\r\n                        this._value = state._value;\r\n                    }\r\n                    /** Resets value */\r\n\r\n                }, {\r\n                    key: \"reset\",\r\n                    value: function reset() {\r\n                        this._value = '';\r\n                    }\r\n                    /** */\r\n\r\n                }, {\r\n                    key: \"value\",\r\n                    get: function get() {\r\n                        return this._value;\r\n                    },\r\n                    set: function set(value) {\r\n                        this.resolve(value);\r\n                    }\r\n                    /** Resolve new value */\r\n\r\n                }, {\r\n                    key: \"resolve\",\r\n                    value: function resolve(value) {\r\n                        this.reset();\r\n                        this.append(value, {\r\n                            input: true\r\n                        }, '');\r\n                        this.doCommit();\r\n                        return this.value;\r\n                    }\r\n                    /** */\r\n\r\n                }, {\r\n                    key: \"unmaskedValue\",\r\n                    get: function get() {\r\n                        return this.value;\r\n                    },\r\n                    set: function set(value) {\r\n                        this.reset();\r\n                        this.append(value, {}, '');\r\n                        this.doCommit();\r\n                    }\r\n                    /** */\r\n\r\n                }, {\r\n                    key: \"typedValue\",\r\n                    get: function get() {\r\n                        return this.doParse(this.value);\r\n                    },\r\n                    set: function set(value) {\r\n                        this.value = this.doFormat(value);\r\n                    }\r\n                    /** Value that includes raw user input */\r\n\r\n                }, {\r\n                    key: \"rawInputValue\",\r\n                    get: function get() {\r\n                        return this.extractInput(0, this.value.length, {\r\n                            raw: true\r\n                        });\r\n                    },\r\n                    set: function set(value) {\r\n                        this.reset();\r\n                        this.append(value, {\r\n                            raw: true\r\n                        }, '');\r\n                        this.doCommit();\r\n                    }\r\n                    /** */\r\n\r\n                }, {\r\n                    key: \"isComplete\",\r\n                    get: function get() {\r\n                        return true;\r\n                    }\r\n                    /** Finds nearest input position in direction */\r\n\r\n                }, {\r\n                    key: \"nearestInputPos\",\r\n                    value: function nearestInputPos(cursorPos, direction) {\r\n                        return cursorPos;\r\n                    }\r\n                    /** Extracts value in range considering flags */\r\n\r\n                }, {\r\n                    key: \"extractInput\",\r\n                    value: function extractInput() {\r\n                        var fromPos = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 0;\r\n                        var toPos = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : this.value.length;\r\n                        return this.value.slice(fromPos, toPos);\r\n                    }\r\n                    /** Extracts tail in range */\r\n\r\n                }, {\r\n                    key: \"extractTail\",\r\n                    value: function extractTail() {\r\n                        var fromPos = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 0;\r\n                        var toPos = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : this.value.length;\r\n                        return new ContinuousTailDetails(this.extractInput(fromPos, toPos), fromPos);\r\n                    }\r\n                    /** Appends tail */\r\n                    // $FlowFixMe no ideas\r\n\r\n                }, {\r\n                    key: \"appendTail\",\r\n                    value: function appendTail(tail) {\r\n                        if (isString(tail)) tail = new ContinuousTailDetails(String(tail));\r\n                        return tail.appendTo(this);\r\n                    }\r\n                    /** Appends char */\r\n\r\n                }, {\r\n                    key: \"_appendCharRaw\",\r\n                    value: function _appendCharRaw(ch) {\r\n                        if (!ch) return new ChangeDetails();\r\n                        this._value += ch;\r\n                        return new ChangeDetails({\r\n                            inserted: ch,\r\n                            rawInserted: ch\r\n                        });\r\n                    }\r\n                    /** Appends char */\r\n\r\n                }, {\r\n                    key: \"_appendChar\",\r\n                    value: function _appendChar(ch) {\r\n                        var flags = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\r\n                        var checkTail = arguments.length > 2 ? arguments[2] : undefined;\r\n                        var consistentState = this.state;\r\n\r\n                        var details = this._appendCharRaw(this.doPrepare(ch, flags), flags);\r\n\r\n                        if (details.inserted) {\r\n                            var consistentTail;\r\n                            var appended = this.doValidate(flags) !== false;\r\n\r\n                            if (appended && checkTail != null) {\r\n                                // validation ok, check tail\r\n                                var beforeTailState = this.state;\r\n\r\n                                if (this.overwrite) {\r\n                                    consistentTail = checkTail.state;\r\n                                    checkTail.shiftBefore(this.value.length);\r\n                                }\r\n\r\n                                var tailDetails = this.appendTail(checkTail);\r\n                                appended = tailDetails.rawInserted === checkTail.toString(); // if ok, rollback state after tail\r\n\r\n                                if (appended && tailDetails.inserted) this.state = beforeTailState;\r\n                            } // revert all if something went wrong\r\n\r\n\r\n                            if (!appended) {\r\n                                details = new ChangeDetails();\r\n                                this.state = consistentState;\r\n                                if (checkTail && consistentTail) checkTail.state = consistentTail;\r\n                            }\r\n                        }\r\n\r\n                        return details;\r\n                    }\r\n                    /** Appends optional placeholder at end */\r\n\r\n                }, {\r\n                    key: \"_appendPlaceholder\",\r\n                    value: function _appendPlaceholder() {\r\n                        return new ChangeDetails();\r\n                    }\r\n                    /** Appends symbols considering flags */\r\n                    // $FlowFixMe no ideas\r\n\r\n                }, {\r\n                    key: \"append\",\r\n                    value: function append(str, flags, tail) {\r\n                        if (!isString(str)) throw new Error('value should be string');\r\n                        var details = new ChangeDetails();\r\n                        var checkTail = isString(tail) ? new ContinuousTailDetails(String(tail)) : tail;\r\n                        if (flags && flags.tail) flags._beforeTailState = this.state;\r\n\r\n                        for (var ci = 0; ci < str.length; ++ci) {\r\n                            details.aggregate(this._appendChar(str[ci], flags, checkTail));\r\n                        } // append tail but aggregate only tailShift\r\n\r\n\r\n                        if (checkTail != null) {\r\n                            details.tailShift += this.appendTail(checkTail).tailShift; // TODO it's a good idea to clear state after appending ends\r\n                            // but it causes bugs when one append calls another (when dynamic dispatch set rawInputValue)\r\n                            // this._resetBeforeTailState();\r\n                        }\r\n\r\n                        return details;\r\n                    }\r\n                    /** */\r\n\r\n                }, {\r\n                    key: \"remove\",\r\n                    value: function remove() {\r\n                        var fromPos = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 0;\r\n                        var toPos = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : this.value.length;\r\n                        this._value = this.value.slice(0, fromPos) + this.value.slice(toPos);\r\n                        return new ChangeDetails();\r\n                    }\r\n                    /** Calls function and reapplies current value */\r\n\r\n                }, {\r\n                    key: \"withValueRefresh\",\r\n                    value: function withValueRefresh(fn) {\r\n                        if (this._refreshing || !this.isInitialized) return fn();\r\n                        this._refreshing = true;\r\n                        var rawInput = this.rawInputValue;\r\n                        var value = this.value;\r\n                        var ret = fn();\r\n                        this.rawInputValue = rawInput; // append lost trailing chars at end\r\n\r\n                        if (this.value && this.value !== value && value.indexOf(this.value) === 0) {\r\n                            this.append(value.slice(this.value.length), {}, '');\r\n                        }\r\n\r\n                        delete this._refreshing;\r\n                        return ret;\r\n                    }\r\n                    /** */\r\n\r\n                }, {\r\n                    key: \"runIsolated\",\r\n                    value: function runIsolated(fn) {\r\n                        if (this._isolated || !this.isInitialized) return fn(this);\r\n                        this._isolated = true;\r\n                        var state = this.state;\r\n                        var ret = fn(this);\r\n                        this.state = state;\r\n                        delete this._isolated;\r\n                        return ret;\r\n                    }\r\n                    /**\r\n                     Prepares string before mask processing\r\n                     @protected\r\n                     */\r\n\r\n                }, {\r\n                    key: \"doPrepare\",\r\n                    value: function doPrepare(str) {\r\n                        var flags = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\r\n                        return this.prepare ? this.prepare(str, this, flags) : str;\r\n                    }\r\n                    /**\r\n                     Validates if value is acceptable\r\n                     @protected\r\n                     */\r\n\r\n                }, {\r\n                    key: \"doValidate\",\r\n                    value: function doValidate(flags) {\r\n                        return (!this.validate || this.validate(this.value, this, flags)) && (!this.parent || this.parent.doValidate(flags));\r\n                    }\r\n                    /**\r\n                     Does additional processing in the end of editing\r\n                     @protected\r\n                     */\r\n\r\n                }, {\r\n                    key: \"doCommit\",\r\n                    value: function doCommit() {\r\n                        if (this.commit) this.commit(this.value, this);\r\n                    }\r\n                    /** */\r\n\r\n                }, {\r\n                    key: \"doFormat\",\r\n                    value: function doFormat(value) {\r\n                        return this.format ? this.format(value, this) : value;\r\n                    }\r\n                    /** */\r\n\r\n                }, {\r\n                    key: \"doParse\",\r\n                    value: function doParse(str) {\r\n                        return this.parse ? this.parse(str, this) : str;\r\n                    }\r\n                    /** */\r\n\r\n                }, {\r\n                    key: \"splice\",\r\n                    value: function splice(start, deleteCount, inserted, removeDirection) {\r\n                        var tailPos = start + deleteCount;\r\n                        var tail = this.extractTail(tailPos);\r\n                        var startChangePos = this.nearestInputPos(start, removeDirection);\r\n                        var changeDetails = new ChangeDetails({\r\n                            tailShift: startChangePos - start // adjust tailShift if start was aligned\r\n\r\n                        }).aggregate(this.remove(startChangePos)).aggregate(this.append(inserted, {\r\n                            input: true\r\n                        }, tail));\r\n                        return changeDetails;\r\n                    }\r\n                }]);\r\n\r\n                return Masked;\r\n            }();\r\n            Masked.DEFAULTS = {\r\n                format: function format(v) {\r\n                    return v;\r\n                },\r\n                parse: function parse(v) {\r\n                    return v;\r\n                }\r\n            };\r\n            IMask.Masked = Masked;\r\n\r\n            /** Get Masked class by mask type */\r\n\r\n            function maskedClass(mask) {\r\n                if (mask == null) {\r\n                    throw new Error('mask property should be defined');\r\n                } // $FlowFixMe\r\n\r\n\r\n                if (mask instanceof RegExp) return IMask.MaskedRegExp; // $FlowFixMe\r\n\r\n                if (isString(mask)) return IMask.MaskedPattern; // $FlowFixMe\r\n\r\n                if (mask instanceof Date || mask === Date) return IMask.MaskedDate; // $FlowFixMe\r\n\r\n                if (mask instanceof Number || typeof mask === 'number' || mask === Number) return IMask.MaskedNumber; // $FlowFixMe\r\n\r\n                if (Array.isArray(mask) || mask === Array) return IMask.MaskedDynamic; // $FlowFixMe\r\n\r\n                if (IMask.Masked && mask.prototype instanceof IMask.Masked) return mask; // $FlowFixMe\r\n\r\n                if (mask instanceof Function) return IMask.MaskedFunction; // $FlowFixMe\r\n\r\n                if (mask instanceof IMask.Masked) return mask.constructor;\r\n                console.warn('Mask not found for mask', mask); // eslint-disable-line no-console\r\n                // $FlowFixMe\r\n\r\n                return IMask.Masked;\r\n            }\r\n\r\n            /** Creates new {@link Masked} depending on mask type */\r\n\r\n            function createMask(opts) {\r\n                // $FlowFixMe\r\n                if (IMask.Masked && opts instanceof IMask.Masked) return opts;\r\n                opts = Object.assign({}, opts);\r\n                var mask = opts.mask; // $FlowFixMe\r\n\r\n                if (IMask.Masked && mask instanceof IMask.Masked) return mask;\r\n                var MaskedClass = maskedClass(mask);\r\n                if (!MaskedClass) throw new Error('Masked class is not found for provided mask, appropriate module needs to be import manually before creating mask.');\r\n                return new MaskedClass(opts);\r\n            }\r\n\r\n            IMask.createMask = createMask;\r\n\r\n            var DEFAULT_INPUT_DEFINITIONS = {\r\n                '0': /\\d/,\r\n                'a': /[\\u0041-\\u005A\\u0061-\\u007A\\u00AA\\u00B5\\u00BA\\u00C0-\\u00D6\\u00D8-\\u00F6\\u00F8-\\u02C1\\u02C6-\\u02D1\\u02E0-\\u02E4\\u02EC\\u02EE\\u0370-\\u0374\\u0376\\u0377\\u037A-\\u037D\\u0386\\u0388-\\u038A\\u038C\\u038E-\\u03A1\\u03A3-\\u03F5\\u03F7-\\u0481\\u048A-\\u0527\\u0531-\\u0556\\u0559\\u0561-\\u0587\\u05D0-\\u05EA\\u05F0-\\u05F2\\u0620-\\u064A\\u066E\\u066F\\u0671-\\u06D3\\u06D5\\u06E5\\u06E6\\u06EE\\u06EF\\u06FA-\\u06FC\\u06FF\\u0710\\u0712-\\u072F\\u074D-\\u07A5\\u07B1\\u07CA-\\u07EA\\u07F4\\u07F5\\u07FA\\u0800-\\u0815\\u081A\\u0824\\u0828\\u0840-\\u0858\\u08A0\\u08A2-\\u08AC\\u0904-\\u0939\\u093D\\u0950\\u0958-\\u0961\\u0971-\\u0977\\u0979-\\u097F\\u0985-\\u098C\\u098F\\u0990\\u0993-\\u09A8\\u09AA-\\u09B0\\u09B2\\u09B6-\\u09B9\\u09BD\\u09CE\\u09DC\\u09DD\\u09DF-\\u09E1\\u09F0\\u09F1\\u0A05-\\u0A0A\\u0A0F\\u0A10\\u0A13-\\u0A28\\u0A2A-\\u0A30\\u0A32\\u0A33\\u0A35\\u0A36\\u0A38\\u0A39\\u0A59-\\u0A5C\\u0A5E\\u0A72-\\u0A74\\u0A85-\\u0A8D\\u0A8F-\\u0A91\\u0A93-\\u0AA8\\u0AAA-\\u0AB0\\u0AB2\\u0AB3\\u0AB5-\\u0AB9\\u0ABD\\u0AD0\\u0AE0\\u0AE1\\u0B05-\\u0B0C\\u0B0F\\u0B10\\u0B13-\\u0B28\\u0B2A-\\u0B30\\u0B32\\u0B33\\u0B35-\\u0B39\\u0B3D\\u0B5C\\u0B5D\\u0B5F-\\u0B61\\u0B71\\u0B83\\u0B85-\\u0B8A\\u0B8E-\\u0B90\\u0B92-\\u0B95\\u0B99\\u0B9A\\u0B9C\\u0B9E\\u0B9F\\u0BA3\\u0BA4\\u0BA8-\\u0BAA\\u0BAE-\\u0BB9\\u0BD0\\u0C05-\\u0C0C\\u0C0E-\\u0C10\\u0C12-\\u0C28\\u0C2A-\\u0C33\\u0C35-\\u0C39\\u0C3D\\u0C58\\u0C59\\u0C60\\u0C61\\u0C85-\\u0C8C\\u0C8E-\\u0C90\\u0C92-\\u0CA8\\u0CAA-\\u0CB3\\u0CB5-\\u0CB9\\u0CBD\\u0CDE\\u0CE0\\u0CE1\\u0CF1\\u0CF2\\u0D05-\\u0D0C\\u0D0E-\\u0D10\\u0D12-\\u0D3A\\u0D3D\\u0D4E\\u0D60\\u0D61\\u0D7A-\\u0D7F\\u0D85-\\u0D96\\u0D9A-\\u0DB1\\u0DB3-\\u0DBB\\u0DBD\\u0DC0-\\u0DC6\\u0E01-\\u0E30\\u0E32\\u0E33\\u0E40-\\u0E46\\u0E81\\u0E82\\u0E84\\u0E87\\u0E88\\u0E8A\\u0E8D\\u0E94-\\u0E97\\u0E99-\\u0E9F\\u0EA1-\\u0EA3\\u0EA5\\u0EA7\\u0EAA\\u0EAB\\u0EAD-\\u0EB0\\u0EB2\\u0EB3\\u0EBD\\u0EC0-\\u0EC4\\u0EC6\\u0EDC-\\u0EDF\\u0F00\\u0F40-\\u0F47\\u0F49-\\u0F6C\\u0F88-\\u0F8C\\u1000-\\u102A\\u103F\\u1050-\\u1055\\u105A-\\u105D\\u1061\\u1065\\u1066\\u106E-\\u1070\\u1075-\\u1081\\u108E\\u10A0-\\u10C5\\u10C7\\u10CD\\u10D0-\\u10FA\\u10FC-\\u1248\\u124A-\\u124D\\u1250-\\u1256\\u1258\\u125A-\\u125D\\u1260-\\u1288\\u128A-\\u128D\\u1290-\\u12B0\\u12B2-\\u12B5\\u12B8-\\u12BE\\u12C0\\u12C2-\\u12C5\\u12C8-\\u12D6\\u12D8-\\u1310\\u1312-\\u1315\\u1318-\\u135A\\u1380-\\u138F\\u13A0-\\u13F4\\u1401-\\u166C\\u166F-\\u167F\\u1681-\\u169A\\u16A0-\\u16EA\\u1700-\\u170C\\u170E-\\u1711\\u1720-\\u1731\\u1740-\\u1751\\u1760-\\u176C\\u176E-\\u1770\\u1780-\\u17B3\\u17D7\\u17DC\\u1820-\\u1877\\u1880-\\u18A8\\u18AA\\u18B0-\\u18F5\\u1900-\\u191C\\u1950-\\u196D\\u1970-\\u1974\\u1980-\\u19AB\\u19C1-\\u19C7\\u1A00-\\u1A16\\u1A20-\\u1A54\\u1AA7\\u1B05-\\u1B33\\u1B45-\\u1B4B\\u1B83-\\u1BA0\\u1BAE\\u1BAF\\u1BBA-\\u1BE5\\u1C00-\\u1C23\\u1C4D-\\u1C4F\\u1C5A-\\u1C7D\\u1CE9-\\u1CEC\\u1CEE-\\u1CF1\\u1CF5\\u1CF6\\u1D00-\\u1DBF\\u1E00-\\u1F15\\u1F18-\\u1F1D\\u1F20-\\u1F45\\u1F48-\\u1F4D\\u1F50-\\u1F57\\u1F59\\u1F5B\\u1F5D\\u1F5F-\\u1F7D\\u1F80-\\u1FB4\\u1FB6-\\u1FBC\\u1FBE\\u1FC2-\\u1FC4\\u1FC6-\\u1FCC\\u1FD0-\\u1FD3\\u1FD6-\\u1FDB\\u1FE0-\\u1FEC\\u1FF2-\\u1FF4\\u1FF6-\\u1FFC\\u2071\\u207F\\u2090-\\u209C\\u2102\\u2107\\u210A-\\u2113\\u2115\\u2119-\\u211D\\u2124\\u2126\\u2128\\u212A-\\u212D\\u212F-\\u2139\\u213C-\\u213F\\u2145-\\u2149\\u214E\\u2183\\u2184\\u2C00-\\u2C2E\\u2C30-\\u2C5E\\u2C60-\\u2CE4\\u2CEB-\\u2CEE\\u2CF2\\u2CF3\\u2D00-\\u2D25\\u2D27\\u2D2D\\u2D30-\\u2D67\\u2D6F\\u2D80-\\u2D96\\u2DA0-\\u2DA6\\u2DA8-\\u2DAE\\u2DB0-\\u2DB6\\u2DB8-\\u2DBE\\u2DC0-\\u2DC6\\u2DC8-\\u2DCE\\u2DD0-\\u2DD6\\u2DD8-\\u2DDE\\u2E2F\\u3005\\u3006\\u3031-\\u3035\\u303B\\u303C\\u3041-\\u3096\\u309D-\\u309F\\u30A1-\\u30FA\\u30FC-\\u30FF\\u3105-\\u312D\\u3131-\\u318E\\u31A0-\\u31BA\\u31F0-\\u31FF\\u3400-\\u4DB5\\u4E00-\\u9FCC\\uA000-\\uA48C\\uA4D0-\\uA4FD\\uA500-\\uA60C\\uA610-\\uA61F\\uA62A\\uA62B\\uA640-\\uA66E\\uA67F-\\uA697\\uA6A0-\\uA6E5\\uA717-\\uA71F\\uA722-\\uA788\\uA78B-\\uA78E\\uA790-\\uA793\\uA7A0-\\uA7AA\\uA7F8-\\uA801\\uA803-\\uA805\\uA807-\\uA80A\\uA80C-\\uA822\\uA840-\\uA873\\uA882-\\uA8B3\\uA8F2-\\uA8F7\\uA8FB\\uA90A-\\uA925\\uA930-\\uA946\\uA960-\\uA97C\\uA984-\\uA9B2\\uA9CF\\uAA00-\\uAA28\\uAA40-\\uAA42\\uAA44-\\uAA4B\\uAA60-\\uAA76\\uAA7A\\uAA80-\\uAAAF\\uAAB1\\uAAB5\\uAAB6\\uAAB9-\\uAABD\\uAAC0\\uAAC2\\uAADB-\\uAADD\\uAAE0-\\uAAEA\\uAAF2-\\uAAF4\\uAB01-\\uAB06\\uAB09-\\uAB0E\\uAB11-\\uAB16\\uAB20-\\uAB26\\uAB28-\\uAB2E\\uABC0-\\uABE2\\uAC00-\\uD7A3\\uD7B0-\\uD7C6\\uD7CB-\\uD7FB\\uF900-\\uFA6D\\uFA70-\\uFAD9\\uFB00-\\uFB06\\uFB13-\\uFB17\\uFB1D\\uFB1F-\\uFB28\\uFB2A-\\uFB36\\uFB38-\\uFB3C\\uFB3E\\uFB40\\uFB41\\uFB43\\uFB44\\uFB46-\\uFBB1\\uFBD3-\\uFD3D\\uFD50-\\uFD8F\\uFD92-\\uFDC7\\uFDF0-\\uFDFB\\uFE70-\\uFE74\\uFE76-\\uFEFC\\uFF21-\\uFF3A\\uFF41-\\uFF5A\\uFF66-\\uFFBE\\uFFC2-\\uFFC7\\uFFCA-\\uFFCF\\uFFD2-\\uFFD7\\uFFDA-\\uFFDC]/,\r\n                // http://stackoverflow.com/a/22075070\r\n                '*': /./\r\n            };\r\n            /** */\r\n\r\n            var PatternInputDefinition = /*#__PURE__*/function () {\r\n                /** */\r\n\r\n                /** */\r\n\r\n                /** */\r\n\r\n                /** */\r\n\r\n                /** */\r\n\r\n                /** */\r\n                function PatternInputDefinition(opts) {\r\n                    _classCallCheck(this, PatternInputDefinition);\r\n\r\n                    var mask = opts.mask,\r\n                        blockOpts = _objectWithoutProperties(opts, [\"mask\"]);\r\n\r\n                    this.masked = createMask({\r\n                        mask: mask\r\n                    });\r\n                    Object.assign(this, blockOpts);\r\n                }\r\n\r\n                _createClass(PatternInputDefinition, [{\r\n                    key: \"reset\",\r\n                    value: function reset() {\r\n                        this._isFilled = false;\r\n                        this.masked.reset();\r\n                    }\r\n                }, {\r\n                    key: \"remove\",\r\n                    value: function remove() {\r\n                        var fromPos = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 0;\r\n                        var toPos = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : this.value.length;\r\n\r\n                        if (fromPos === 0 && toPos >= 1) {\r\n                            this._isFilled = false;\r\n                            return this.masked.remove(fromPos, toPos);\r\n                        }\r\n\r\n                        return new ChangeDetails();\r\n                    }\r\n                }, {\r\n                    key: \"value\",\r\n                    get: function get() {\r\n                        return this.masked.value || (this._isFilled && !this.isOptional ? this.placeholderChar : '');\r\n                    }\r\n                }, {\r\n                    key: \"unmaskedValue\",\r\n                    get: function get() {\r\n                        return this.masked.unmaskedValue;\r\n                    }\r\n                }, {\r\n                    key: \"isComplete\",\r\n                    get: function get() {\r\n                        return Boolean(this.masked.value) || this.isOptional;\r\n                    }\r\n                }, {\r\n                    key: \"_appendChar\",\r\n                    value: function _appendChar(str) {\r\n                        var flags = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\r\n                        if (this._isFilled) return new ChangeDetails();\r\n                        var state = this.masked.state; // simulate input\r\n\r\n                        var details = this.masked._appendChar(str, flags);\r\n\r\n                        if (details.inserted && this.doValidate(flags) === false) {\r\n                            details.inserted = details.rawInserted = '';\r\n                            this.masked.state = state;\r\n                        }\r\n\r\n                        if (!details.inserted && !this.isOptional && !this.lazy && !flags.input) {\r\n                            details.inserted = this.placeholderChar;\r\n                        }\r\n\r\n                        details.skip = !details.inserted && !this.isOptional;\r\n                        this._isFilled = Boolean(details.inserted);\r\n                        return details;\r\n                    }\r\n                }, {\r\n                    key: \"append\",\r\n                    value: function append() {\r\n                        var _this$masked;\r\n\r\n                        return (_this$masked = this.masked).append.apply(_this$masked, arguments);\r\n                    }\r\n                }, {\r\n                    key: \"_appendPlaceholder\",\r\n                    value: function _appendPlaceholder() {\r\n                        var details = new ChangeDetails();\r\n                        if (this._isFilled || this.isOptional) return details;\r\n                        this._isFilled = true;\r\n                        details.inserted = this.placeholderChar;\r\n                        return details;\r\n                    }\r\n                }, {\r\n                    key: \"extractTail\",\r\n                    value: function extractTail() {\r\n                        var _this$masked2;\r\n\r\n                        return (_this$masked2 = this.masked).extractTail.apply(_this$masked2, arguments);\r\n                    }\r\n                }, {\r\n                    key: \"appendTail\",\r\n                    value: function appendTail() {\r\n                        var _this$masked3;\r\n\r\n                        return (_this$masked3 = this.masked).appendTail.apply(_this$masked3, arguments);\r\n                    }\r\n                }, {\r\n                    key: \"extractInput\",\r\n                    value: function extractInput() {\r\n                        var fromPos = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 0;\r\n                        var toPos = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : this.value.length;\r\n                        var flags = arguments.length > 2 ? arguments[2] : undefined;\r\n                        return this.masked.extractInput(fromPos, toPos, flags);\r\n                    }\r\n                }, {\r\n                    key: \"nearestInputPos\",\r\n                    value: function nearestInputPos(cursorPos) {\r\n                        var direction = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : DIRECTION.NONE;\r\n                        var minPos = 0;\r\n                        var maxPos = this.value.length;\r\n                        var boundPos = Math.min(Math.max(cursorPos, minPos), maxPos);\r\n\r\n                        switch (direction) {\r\n                            case DIRECTION.LEFT:\r\n                            case DIRECTION.FORCE_LEFT:\r\n                                return this.isComplete ? boundPos : minPos;\r\n\r\n                            case DIRECTION.RIGHT:\r\n                            case DIRECTION.FORCE_RIGHT:\r\n                                return this.isComplete ? boundPos : maxPos;\r\n\r\n                            case DIRECTION.NONE:\r\n                            default:\r\n                                return boundPos;\r\n                        }\r\n                    }\r\n                }, {\r\n                    key: \"doValidate\",\r\n                    value: function doValidate() {\r\n                        var _this$masked4, _this$parent;\r\n\r\n                        return (_this$masked4 = this.masked).doValidate.apply(_this$masked4, arguments) && (!this.parent || (_this$parent = this.parent).doValidate.apply(_this$parent, arguments));\r\n                    }\r\n                }, {\r\n                    key: \"doCommit\",\r\n                    value: function doCommit() {\r\n                        this.masked.doCommit();\r\n                    }\r\n                }, {\r\n                    key: \"state\",\r\n                    get: function get() {\r\n                        return {\r\n                            masked: this.masked.state,\r\n                            _isFilled: this._isFilled\r\n                        };\r\n                    },\r\n                    set: function set(state) {\r\n                        this.masked.state = state.masked;\r\n                        this._isFilled = state._isFilled;\r\n                    }\r\n                }]);\r\n\r\n                return PatternInputDefinition;\r\n            }();\r\n\r\n            var PatternFixedDefinition = /*#__PURE__*/function () {\r\n                /** */\r\n\r\n                /** */\r\n\r\n                /** */\r\n\r\n                /** */\r\n                function PatternFixedDefinition(opts) {\r\n                    _classCallCheck(this, PatternFixedDefinition);\r\n\r\n                    Object.assign(this, opts);\r\n                    this._value = '';\r\n                }\r\n\r\n                _createClass(PatternFixedDefinition, [{\r\n                    key: \"value\",\r\n                    get: function get() {\r\n                        return this._value;\r\n                    }\r\n                }, {\r\n                    key: \"unmaskedValue\",\r\n                    get: function get() {\r\n                        return this.isUnmasking ? this.value : '';\r\n                    }\r\n                }, {\r\n                    key: \"reset\",\r\n                    value: function reset() {\r\n                        this._isRawInput = false;\r\n                        this._value = '';\r\n                    }\r\n                }, {\r\n                    key: \"remove\",\r\n                    value: function remove() {\r\n                        var fromPos = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 0;\r\n                        var toPos = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : this._value.length;\r\n                        this._value = this._value.slice(0, fromPos) + this._value.slice(toPos);\r\n                        if (!this._value) this._isRawInput = false;\r\n                        return new ChangeDetails();\r\n                    }\r\n                }, {\r\n                    key: \"nearestInputPos\",\r\n                    value: function nearestInputPos(cursorPos) {\r\n                        var direction = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : DIRECTION.NONE;\r\n                        var minPos = 0;\r\n                        var maxPos = this._value.length;\r\n\r\n                        switch (direction) {\r\n                            case DIRECTION.LEFT:\r\n                            case DIRECTION.FORCE_LEFT:\r\n                                return minPos;\r\n\r\n                            case DIRECTION.NONE:\r\n                            case DIRECTION.RIGHT:\r\n                            case DIRECTION.FORCE_RIGHT:\r\n                            default:\r\n                                return maxPos;\r\n                        }\r\n                    }\r\n                }, {\r\n                    key: \"extractInput\",\r\n                    value: function extractInput() {\r\n                        var fromPos = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 0;\r\n                        var toPos = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : this._value.length;\r\n                        var flags = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\r\n                        return flags.raw && this._isRawInput && this._value.slice(fromPos, toPos) || '';\r\n                    }\r\n                }, {\r\n                    key: \"isComplete\",\r\n                    get: function get() {\r\n                        return true;\r\n                    }\r\n                }, {\r\n                    key: \"_appendChar\",\r\n                    value: function _appendChar(str) {\r\n                        var flags = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\r\n                        var details = new ChangeDetails();\r\n                        if (this._value) return details;\r\n                        var appended = this.char === str[0];\r\n                        var isResolved = appended && (this.isUnmasking || flags.input || flags.raw) && !flags.tail;\r\n                        if (isResolved) details.rawInserted = this.char;\r\n                        this._value = details.inserted = this.char;\r\n                        this._isRawInput = isResolved && (flags.raw || flags.input);\r\n                        return details;\r\n                    }\r\n                }, {\r\n                    key: \"_appendPlaceholder\",\r\n                    value: function _appendPlaceholder() {\r\n                        var details = new ChangeDetails();\r\n                        if (this._value) return details;\r\n                        this._value = details.inserted = this.char;\r\n                        return details;\r\n                    }\r\n                }, {\r\n                    key: \"extractTail\",\r\n                    value: function extractTail() {\r\n                        arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : this.value.length;\r\n                        return new ContinuousTailDetails('');\r\n                    } // $FlowFixMe no ideas\r\n\r\n                }, {\r\n                    key: \"appendTail\",\r\n                    value: function appendTail(tail) {\r\n                        if (isString(tail)) tail = new ContinuousTailDetails(String(tail));\r\n                        return tail.appendTo(this);\r\n                    }\r\n                }, {\r\n                    key: \"append\",\r\n                    value: function append(str, flags, tail) {\r\n                        var details = this._appendChar(str, flags);\r\n\r\n                        if (tail != null) {\r\n                            details.tailShift += this.appendTail(tail).tailShift;\r\n                        }\r\n\r\n                        return details;\r\n                    }\r\n                }, {\r\n                    key: \"doCommit\",\r\n                    value: function doCommit() {\r\n                    }\r\n                }, {\r\n                    key: \"state\",\r\n                    get: function get() {\r\n                        return {\r\n                            _value: this._value,\r\n                            _isRawInput: this._isRawInput\r\n                        };\r\n                    },\r\n                    set: function set(state) {\r\n                        Object.assign(this, state);\r\n                    }\r\n                }]);\r\n\r\n                return PatternFixedDefinition;\r\n            }();\r\n\r\n            var ChunksTailDetails = /*#__PURE__*/function () {\r\n                /** */\r\n                function ChunksTailDetails() {\r\n                    var chunks = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [];\r\n                    var from = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;\r\n\r\n                    _classCallCheck(this, ChunksTailDetails);\r\n\r\n                    this.chunks = chunks;\r\n                    this.from = from;\r\n                }\r\n\r\n                _createClass(ChunksTailDetails, [{\r\n                    key: \"toString\",\r\n                    value: function toString() {\r\n                        return this.chunks.map(String).join('');\r\n                    } // $FlowFixMe no ideas\r\n\r\n                }, {\r\n                    key: \"extend\",\r\n                    value: function extend(tailChunk) {\r\n                        if (!String(tailChunk)) return;\r\n                        if (isString(tailChunk)) tailChunk = new ContinuousTailDetails(String(tailChunk));\r\n                        var lastChunk = this.chunks[this.chunks.length - 1];\r\n                        var extendLast = lastChunk && ( // if stops are same or tail has no stop\r\n                                lastChunk.stop === tailChunk.stop || tailChunk.stop == null) && // if tail chunk goes just after last chunk\r\n                            tailChunk.from === lastChunk.from + lastChunk.toString().length;\r\n\r\n                        if (tailChunk instanceof ContinuousTailDetails) {\r\n                            // check the ability to extend previous chunk\r\n                            if (extendLast) {\r\n                                // extend previous chunk\r\n                                lastChunk.extend(tailChunk.toString());\r\n                            } else {\r\n                                // append new chunk\r\n                                this.chunks.push(tailChunk);\r\n                            }\r\n                        } else if (tailChunk instanceof ChunksTailDetails) {\r\n                            if (tailChunk.stop == null) {\r\n                                // unwrap floating chunks to parent, keeping `from` pos\r\n                                var firstTailChunk;\r\n\r\n                                while (tailChunk.chunks.length && tailChunk.chunks[0].stop == null) {\r\n                                    firstTailChunk = tailChunk.chunks.shift();\r\n                                    firstTailChunk.from += tailChunk.from;\r\n                                    this.extend(firstTailChunk);\r\n                                }\r\n                            } // if tail chunk still has value\r\n\r\n\r\n                            if (tailChunk.toString()) {\r\n                                // if chunks contains stops, then popup stop to container\r\n                                tailChunk.stop = tailChunk.blockIndex;\r\n                                this.chunks.push(tailChunk);\r\n                            }\r\n                        }\r\n                    }\r\n                }, {\r\n                    key: \"appendTo\",\r\n                    value: function appendTo(masked) {\r\n                        // $FlowFixMe\r\n                        if (!(masked instanceof IMask.MaskedPattern)) {\r\n                            var tail = new ContinuousTailDetails(this.toString());\r\n                            return tail.appendTo(masked);\r\n                        }\r\n\r\n                        var details = new ChangeDetails();\r\n\r\n                        for (var ci = 0; ci < this.chunks.length && !details.skip; ++ci) {\r\n                            var chunk = this.chunks[ci];\r\n\r\n                            var lastBlockIter = masked._mapPosToBlock(masked.value.length);\r\n\r\n                            var stop = chunk.stop;\r\n                            var chunkBlock = void 0;\r\n\r\n                            if (stop != null && ( // if block not found or stop is behind lastBlock\r\n                                !lastBlockIter || lastBlockIter.index <= stop)) {\r\n                                if (chunk instanceof ChunksTailDetails || // for continuous block also check if stop is exist\r\n                                    masked._stops.indexOf(stop) >= 0) {\r\n                                    details.aggregate(masked._appendPlaceholder(stop));\r\n                                }\r\n\r\n                                chunkBlock = chunk instanceof ChunksTailDetails && masked._blocks[stop];\r\n                            }\r\n\r\n                            if (chunkBlock) {\r\n                                var tailDetails = chunkBlock.appendTail(chunk);\r\n                                tailDetails.skip = false; // always ignore skip, it will be set on last\r\n\r\n                                details.aggregate(tailDetails);\r\n                                masked._value += tailDetails.inserted; // get not inserted chars\r\n\r\n                                var remainChars = chunk.toString().slice(tailDetails.rawInserted.length);\r\n                                if (remainChars) details.aggregate(masked.append(remainChars, {\r\n                                    tail: true\r\n                                }));\r\n                            } else {\r\n                                details.aggregate(masked.append(chunk.toString(), {\r\n                                    tail: true\r\n                                }));\r\n                            }\r\n                        }\r\n                        return details;\r\n                    }\r\n                }, {\r\n                    key: \"state\",\r\n                    get: function get() {\r\n                        return {\r\n                            chunks: this.chunks.map(function (c) {\r\n                                return c.state;\r\n                            }),\r\n                            from: this.from,\r\n                            stop: this.stop,\r\n                            blockIndex: this.blockIndex\r\n                        };\r\n                    },\r\n                    set: function set(state) {\r\n                        var chunks = state.chunks,\r\n                            props = _objectWithoutProperties(state, [\"chunks\"]);\r\n\r\n                        Object.assign(this, props);\r\n                        this.chunks = chunks.map(function (cstate) {\r\n                            var chunk = \"chunks\" in cstate ? new ChunksTailDetails() : new ContinuousTailDetails(); // $FlowFixMe already checked above\r\n\r\n                            chunk.state = cstate;\r\n                            return chunk;\r\n                        });\r\n                    }\r\n                }, {\r\n                    key: \"shiftBefore\",\r\n                    value: function shiftBefore(pos) {\r\n                        if (this.from >= pos || !this.chunks.length) return '';\r\n                        var chunkShiftPos = pos - this.from;\r\n                        var ci = 0;\r\n\r\n                        while (ci < this.chunks.length) {\r\n                            var chunk = this.chunks[ci];\r\n                            var shiftChar = chunk.shiftBefore(chunkShiftPos);\r\n\r\n                            if (chunk.toString()) {\r\n                                // chunk still contains value\r\n                                // but not shifted - means no more available chars to shift\r\n                                if (!shiftChar) break;\r\n                                ++ci;\r\n                            } else {\r\n                                // clean if chunk has no value\r\n                                this.chunks.splice(ci, 1);\r\n                            }\r\n\r\n                            if (shiftChar) return shiftChar;\r\n                        }\r\n\r\n                        return '';\r\n                    }\r\n                }]);\r\n\r\n                return ChunksTailDetails;\r\n            }();\r\n\r\n            /** Masking by RegExp */\r\n\r\n            var MaskedRegExp = /*#__PURE__*/function (_Masked) {\r\n                _inherits(MaskedRegExp, _Masked);\r\n\r\n                var _super = _createSuper(MaskedRegExp);\r\n\r\n                function MaskedRegExp() {\r\n                    _classCallCheck(this, MaskedRegExp);\r\n\r\n                    return _super.apply(this, arguments);\r\n                }\r\n\r\n                _createClass(MaskedRegExp, [{\r\n                    key: \"_update\",\r\n                    value:\r\n                        /**\r\n                         @override\r\n                         @param {Object} opts\r\n                         */\r\n                        function _update(opts) {\r\n                            if (opts.mask) opts.validate = function (value) {\r\n                                return value.search(opts.mask) >= 0;\r\n                            };\r\n\r\n                            _get(_getPrototypeOf(MaskedRegExp.prototype), \"_update\", this).call(this, opts);\r\n                        }\r\n                }]);\r\n\r\n                return MaskedRegExp;\r\n            }(Masked);\r\n            IMask.MaskedRegExp = MaskedRegExp;\r\n\r\n            /**\r\n             Pattern mask\r\n             @param {Object} opts\r\n             @param {Object} opts.blocks\r\n             @param {Object} opts.definitions\r\n             @param {string} opts.placeholderChar\r\n             @param {boolean} opts.lazy\r\n             */\r\n            var MaskedPattern = /*#__PURE__*/function (_Masked) {\r\n                _inherits(MaskedPattern, _Masked);\r\n\r\n                var _super = _createSuper(MaskedPattern);\r\n\r\n                /** */\r\n\r\n                /** */\r\n\r\n                /** Single char for empty input */\r\n\r\n                /** Show placeholder only when needed */\r\n                function MaskedPattern() {\r\n                    var opts = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\r\n\r\n                    _classCallCheck(this, MaskedPattern);\r\n\r\n                    // TODO type $Shape<MaskedPatternOptions>={} does not work\r\n                    opts.definitions = Object.assign({}, DEFAULT_INPUT_DEFINITIONS, opts.definitions);\r\n                    return _super.call(this, Object.assign({}, MaskedPattern.DEFAULTS, opts));\r\n                }\r\n\r\n                /**\r\n                 @override\r\n                 @param {Object} opts\r\n                 */\r\n\r\n\r\n                _createClass(MaskedPattern, [{\r\n                    key: \"_update\",\r\n                    value: function _update() {\r\n                        var opts = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\r\n                        opts.definitions = Object.assign({}, this.definitions, opts.definitions);\r\n\r\n                        _get(_getPrototypeOf(MaskedPattern.prototype), \"_update\", this).call(this, opts);\r\n\r\n                        this._rebuildMask();\r\n                    }\r\n                    /** */\r\n\r\n                }, {\r\n                    key: \"_rebuildMask\",\r\n                    value: function _rebuildMask() {\r\n                        var _this = this;\r\n\r\n                        var defs = this.definitions;\r\n                        this._blocks = [];\r\n                        this._stops = [];\r\n                        this._maskedBlocks = {};\r\n                        var pattern = this.mask;\r\n                        if (!pattern || !defs) return;\r\n                        var unmaskingBlock = false;\r\n                        var optionalBlock = false;\r\n\r\n                        for (var i = 0; i < pattern.length; ++i) {\r\n                            if (this.blocks) {\r\n                                var _ret = function () {\r\n                                    var p = pattern.slice(i);\r\n                                    var bNames = Object.keys(_this.blocks).filter(function (bName) {\r\n                                        return p.indexOf(bName) === 0;\r\n                                    }); // order by key length\r\n\r\n                                    bNames.sort(function (a, b) {\r\n                                        return b.length - a.length;\r\n                                    }); // use block name with max length\r\n\r\n                                    var bName = bNames[0];\r\n\r\n                                    if (bName) {\r\n                                        // $FlowFixMe no ideas\r\n                                        var maskedBlock = createMask(Object.assign({\r\n                                            parent: _this,\r\n                                            lazy: _this.lazy,\r\n                                            placeholderChar: _this.placeholderChar,\r\n                                            overwrite: _this.overwrite\r\n                                        }, _this.blocks[bName]));\r\n\r\n                                        if (maskedBlock) {\r\n                                            _this._blocks.push(maskedBlock); // store block index\r\n\r\n\r\n                                            if (!_this._maskedBlocks[bName]) _this._maskedBlocks[bName] = [];\r\n\r\n                                            _this._maskedBlocks[bName].push(_this._blocks.length - 1);\r\n                                        }\r\n\r\n                                        i += bName.length - 1;\r\n                                        return \"continue\";\r\n                                    }\r\n                                }();\r\n\r\n                                if (_ret === \"continue\") continue;\r\n                            }\r\n\r\n                            var char = pattern[i];\r\n\r\n                            var _isInput = (char in defs);\r\n\r\n                            if (char === MaskedPattern.STOP_CHAR) {\r\n                                this._stops.push(this._blocks.length);\r\n\r\n                                continue;\r\n                            }\r\n\r\n                            if (char === '{' || char === '}') {\r\n                                unmaskingBlock = !unmaskingBlock;\r\n                                continue;\r\n                            }\r\n\r\n                            if (char === '[' || char === ']') {\r\n                                optionalBlock = !optionalBlock;\r\n                                continue;\r\n                            }\r\n\r\n                            if (char === MaskedPattern.ESCAPE_CHAR) {\r\n                                ++i;\r\n                                char = pattern[i];\r\n                                if (!char) break;\r\n                                _isInput = false;\r\n                            }\r\n\r\n                            var def = _isInput ? new PatternInputDefinition({\r\n                                parent: this,\r\n                                lazy: this.lazy,\r\n                                placeholderChar: this.placeholderChar,\r\n                                mask: defs[char],\r\n                                isOptional: optionalBlock\r\n                            }) : new PatternFixedDefinition({\r\n                                char: char,\r\n                                isUnmasking: unmaskingBlock\r\n                            });\r\n\r\n                            this._blocks.push(def);\r\n                        }\r\n                    }\r\n                    /**\r\n                     @override\r\n                     */\r\n\r\n                }, {\r\n                    key: \"state\",\r\n                    get: function get() {\r\n                        return Object.assign({}, _get(_getPrototypeOf(MaskedPattern.prototype), \"state\", this), {\r\n                            _blocks: this._blocks.map(function (b) {\r\n                                return b.state;\r\n                            })\r\n                        });\r\n                    },\r\n                    set: function set(state) {\r\n                        var _blocks = state._blocks,\r\n                            maskedState = _objectWithoutProperties(state, [\"_blocks\"]);\r\n\r\n                        this._blocks.forEach(function (b, bi) {\r\n                            return b.state = _blocks[bi];\r\n                        });\r\n\r\n                        _set(_getPrototypeOf(MaskedPattern.prototype), \"state\", maskedState, this, true);\r\n                    }\r\n                    /**\r\n                     @override\r\n                     */\r\n\r\n                }, {\r\n                    key: \"reset\",\r\n                    value: function reset() {\r\n                        _get(_getPrototypeOf(MaskedPattern.prototype), \"reset\", this).call(this);\r\n\r\n                        this._blocks.forEach(function (b) {\r\n                            return b.reset();\r\n                        });\r\n                    }\r\n                    /**\r\n                     @override\r\n                     */\r\n\r\n                }, {\r\n                    key: \"isComplete\",\r\n                    get: function get() {\r\n                        return this._blocks.every(function (b) {\r\n                            return b.isComplete;\r\n                        });\r\n                    }\r\n                    /**\r\n                     @override\r\n                     */\r\n\r\n                }, {\r\n                    key: \"doCommit\",\r\n                    value: function doCommit() {\r\n                        this._blocks.forEach(function (b) {\r\n                            return b.doCommit();\r\n                        });\r\n\r\n                        _get(_getPrototypeOf(MaskedPattern.prototype), \"doCommit\", this).call(this);\r\n                    }\r\n                    /**\r\n                     @override\r\n                     */\r\n\r\n                }, {\r\n                    key: \"unmaskedValue\",\r\n                    get: function get() {\r\n                        return this._blocks.reduce(function (str, b) {\r\n                            return str += b.unmaskedValue;\r\n                        }, '');\r\n                    },\r\n                    set: function set(unmaskedValue) {\r\n                        _set(_getPrototypeOf(MaskedPattern.prototype), \"unmaskedValue\", unmaskedValue, this, true);\r\n                    }\r\n                    /**\r\n                     @override\r\n                     */\r\n\r\n                }, {\r\n                    key: \"value\",\r\n                    get: function get() {\r\n                        // TODO return _value when not in change?\r\n                        return this._blocks.reduce(function (str, b) {\r\n                            return str += b.value;\r\n                        }, '');\r\n                    },\r\n                    set: function set(value) {\r\n                        _set(_getPrototypeOf(MaskedPattern.prototype), \"value\", value, this, true);\r\n                    }\r\n                    /**\r\n                     @override\r\n                     */\r\n\r\n                }, {\r\n                    key: \"appendTail\",\r\n                    value: function appendTail(tail) {\r\n                        return _get(_getPrototypeOf(MaskedPattern.prototype), \"appendTail\", this).call(this, tail).aggregate(this._appendPlaceholder());\r\n                    }\r\n                    /**\r\n                     @override\r\n                     */\r\n\r\n                }, {\r\n                    key: \"_appendCharRaw\",\r\n                    value: function _appendCharRaw(ch) {\r\n                        var flags = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\r\n\r\n                        var blockIter = this._mapPosToBlock(this.value.length);\r\n\r\n                        var details = new ChangeDetails();\r\n                        if (!blockIter) return details;\r\n\r\n                        for (var bi = blockIter.index; ; ++bi) {\r\n                            var _block = this._blocks[bi];\r\n                            if (!_block) break;\r\n\r\n                            var blockDetails = _block._appendChar(ch, flags);\r\n\r\n                            var skip = blockDetails.skip;\r\n                            details.aggregate(blockDetails);\r\n                            if (skip || blockDetails.rawInserted) break; // go next char\r\n                        }\r\n\r\n                        return details;\r\n                    }\r\n                    /**\r\n                     @override\r\n                     */\r\n\r\n                }, {\r\n                    key: \"extractTail\",\r\n                    value: function extractTail() {\r\n                        var _this2 = this;\r\n\r\n                        var fromPos = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 0;\r\n                        var toPos = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : this.value.length;\r\n                        var chunkTail = new ChunksTailDetails();\r\n                        if (fromPos === toPos) return chunkTail;\r\n\r\n                        this._forEachBlocksInRange(fromPos, toPos, function (b, bi, bFromPos, bToPos) {\r\n                            var blockChunk = b.extractTail(bFromPos, bToPos);\r\n                            blockChunk.stop = _this2._findStopBefore(bi);\r\n                            blockChunk.from = _this2._blockStartPos(bi);\r\n                            if (blockChunk instanceof ChunksTailDetails) blockChunk.blockIndex = bi;\r\n                            chunkTail.extend(blockChunk);\r\n                        });\r\n\r\n                        return chunkTail;\r\n                    }\r\n                    /**\r\n                     @override\r\n                     */\r\n\r\n                }, {\r\n                    key: \"extractInput\",\r\n                    value: function extractInput() {\r\n                        var fromPos = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 0;\r\n                        var toPos = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : this.value.length;\r\n                        var flags = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\r\n                        if (fromPos === toPos) return '';\r\n                        var input = '';\r\n\r\n                        this._forEachBlocksInRange(fromPos, toPos, function (b, _, fromPos, toPos) {\r\n                            input += b.extractInput(fromPos, toPos, flags);\r\n                        });\r\n\r\n                        return input;\r\n                    }\r\n                }, {\r\n                    key: \"_findStopBefore\",\r\n                    value: function _findStopBefore(blockIndex) {\r\n                        var stopBefore;\r\n\r\n                        for (var si = 0; si < this._stops.length; ++si) {\r\n                            var stop = this._stops[si];\r\n                            if (stop <= blockIndex) stopBefore = stop; else break;\r\n                        }\r\n\r\n                        return stopBefore;\r\n                    }\r\n                    /** Appends placeholder depending on laziness */\r\n\r\n                }, {\r\n                    key: \"_appendPlaceholder\",\r\n                    value: function _appendPlaceholder(toBlockIndex) {\r\n                        var _this3 = this;\r\n\r\n                        var details = new ChangeDetails();\r\n                        if (this.lazy && toBlockIndex == null) return details;\r\n\r\n                        var startBlockIter = this._mapPosToBlock(this.value.length);\r\n\r\n                        if (!startBlockIter) return details;\r\n                        var startBlockIndex = startBlockIter.index;\r\n                        var endBlockIndex = toBlockIndex != null ? toBlockIndex : this._blocks.length;\r\n\r\n                        this._blocks.slice(startBlockIndex, endBlockIndex).forEach(function (b) {\r\n                            if (!b.lazy || toBlockIndex != null) {\r\n                                // $FlowFixMe `_blocks` may not be present\r\n                                var args = b._blocks != null ? [b._blocks.length] : [];\r\n\r\n                                var bDetails = b._appendPlaceholder.apply(b, args);\r\n\r\n                                _this3._value += bDetails.inserted;\r\n                                details.aggregate(bDetails);\r\n                            }\r\n                        });\r\n\r\n                        return details;\r\n                    }\r\n                    /** Finds block in pos */\r\n\r\n                }, {\r\n                    key: \"_mapPosToBlock\",\r\n                    value: function _mapPosToBlock(pos) {\r\n                        var accVal = '';\r\n\r\n                        for (var bi = 0; bi < this._blocks.length; ++bi) {\r\n                            var _block2 = this._blocks[bi];\r\n                            var blockStartPos = accVal.length;\r\n                            accVal += _block2.value;\r\n\r\n                            if (pos <= accVal.length) {\r\n                                return {\r\n                                    index: bi,\r\n                                    offset: pos - blockStartPos\r\n                                };\r\n                            }\r\n                        }\r\n                    }\r\n                    /** */\r\n\r\n                }, {\r\n                    key: \"_blockStartPos\",\r\n                    value: function _blockStartPos(blockIndex) {\r\n                        return this._blocks.slice(0, blockIndex).reduce(function (pos, b) {\r\n                            return pos += b.value.length;\r\n                        }, 0);\r\n                    }\r\n                    /** */\r\n\r\n                }, {\r\n                    key: \"_forEachBlocksInRange\",\r\n                    value: function _forEachBlocksInRange(fromPos) {\r\n                        var toPos = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : this.value.length;\r\n                        var fn = arguments.length > 2 ? arguments[2] : undefined;\r\n\r\n                        var fromBlockIter = this._mapPosToBlock(fromPos);\r\n\r\n                        if (fromBlockIter) {\r\n                            var toBlockIter = this._mapPosToBlock(toPos); // process first block\r\n\r\n\r\n                            var isSameBlock = toBlockIter && fromBlockIter.index === toBlockIter.index;\r\n                            var fromBlockStartPos = fromBlockIter.offset;\r\n                            var fromBlockEndPos = toBlockIter && isSameBlock ? toBlockIter.offset : this._blocks[fromBlockIter.index].value.length;\r\n                            fn(this._blocks[fromBlockIter.index], fromBlockIter.index, fromBlockStartPos, fromBlockEndPos);\r\n\r\n                            if (toBlockIter && !isSameBlock) {\r\n                                // process intermediate blocks\r\n                                for (var bi = fromBlockIter.index + 1; bi < toBlockIter.index; ++bi) {\r\n                                    fn(this._blocks[bi], bi, 0, this._blocks[bi].value.length);\r\n                                } // process last block\r\n\r\n\r\n                                fn(this._blocks[toBlockIter.index], toBlockIter.index, 0, toBlockIter.offset);\r\n                            }\r\n                        }\r\n                    }\r\n                    /**\r\n                     @override\r\n                     */\r\n\r\n                }, {\r\n                    key: \"remove\",\r\n                    value: function remove() {\r\n                        var fromPos = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 0;\r\n                        var toPos = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : this.value.length;\r\n\r\n                        var removeDetails = _get(_getPrototypeOf(MaskedPattern.prototype), \"remove\", this).call(this, fromPos, toPos);\r\n\r\n                        this._forEachBlocksInRange(fromPos, toPos, function (b, _, bFromPos, bToPos) {\r\n                            removeDetails.aggregate(b.remove(bFromPos, bToPos));\r\n                        });\r\n\r\n                        return removeDetails;\r\n                    }\r\n                    /**\r\n                     @override\r\n                     */\r\n\r\n                }, {\r\n                    key: \"nearestInputPos\",\r\n                    value: function nearestInputPos(cursorPos) {\r\n                        var direction = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : DIRECTION.NONE;\r\n                        // TODO refactor - extract alignblock\r\n                        var beginBlockData = this._mapPosToBlock(cursorPos) || {\r\n                            index: 0,\r\n                            offset: 0\r\n                        };\r\n                        var beginBlockOffset = beginBlockData.offset,\r\n                            beginBlockIndex = beginBlockData.index;\r\n                        var beginBlock = this._blocks[beginBlockIndex];\r\n                        if (!beginBlock) return cursorPos;\r\n                        var beginBlockCursorPos = beginBlockOffset; // if position inside block - try to adjust it\r\n\r\n                        if (beginBlockCursorPos !== 0 && beginBlockCursorPos < beginBlock.value.length) {\r\n                            beginBlockCursorPos = beginBlock.nearestInputPos(beginBlockOffset, forceDirection(direction));\r\n                        }\r\n\r\n                        var cursorAtRight = beginBlockCursorPos === beginBlock.value.length;\r\n                        var cursorAtLeft = beginBlockCursorPos === 0; //  cursor is INSIDE first block (not at bounds)\r\n\r\n                        if (!cursorAtLeft && !cursorAtRight) return this._blockStartPos(beginBlockIndex) + beginBlockCursorPos;\r\n                        var searchBlockIndex = cursorAtRight ? beginBlockIndex + 1 : beginBlockIndex;\r\n\r\n                        if (direction === DIRECTION.NONE) {\r\n                            // NONE direction used to calculate start input position if no chars were removed\r\n                            // FOR NONE:\r\n                            // -\r\n                            // input|any\r\n                            // ->\r\n                            //  any|input\r\n                            // <-\r\n                            //  filled-input|any\r\n                            // check if first block at left is input\r\n                            if (searchBlockIndex > 0) {\r\n                                var blockIndexAtLeft = searchBlockIndex - 1;\r\n                                var blockAtLeft = this._blocks[blockIndexAtLeft];\r\n                                var blockInputPos = blockAtLeft.nearestInputPos(0, DIRECTION.NONE); // is input\r\n\r\n                                if (!blockAtLeft.value.length || blockInputPos !== blockAtLeft.value.length) {\r\n                                    return this._blockStartPos(searchBlockIndex);\r\n                                }\r\n                            } // ->\r\n\r\n\r\n                            var firstInputAtRight = searchBlockIndex;\r\n\r\n                            for (var bi = firstInputAtRight; bi < this._blocks.length; ++bi) {\r\n                                var blockAtRight = this._blocks[bi];\r\n\r\n                                var _blockInputPos = blockAtRight.nearestInputPos(0, DIRECTION.NONE);\r\n\r\n                                if (!blockAtRight.value.length || _blockInputPos !== blockAtRight.value.length) {\r\n                                    return this._blockStartPos(bi) + _blockInputPos;\r\n                                }\r\n                            } // <-\r\n                            // find first non-fixed symbol\r\n\r\n\r\n                            for (var _bi = searchBlockIndex - 1; _bi >= 0; --_bi) {\r\n                                var _block3 = this._blocks[_bi];\r\n\r\n                                var _blockInputPos2 = _block3.nearestInputPos(0, DIRECTION.NONE); // is input\r\n\r\n\r\n                                if (!_block3.value.length || _blockInputPos2 !== _block3.value.length) {\r\n                                    return this._blockStartPos(_bi) + _block3.value.length;\r\n                                }\r\n                            }\r\n\r\n                            return cursorPos;\r\n                        }\r\n\r\n                        if (direction === DIRECTION.LEFT || direction === DIRECTION.FORCE_LEFT) {\r\n                            // -\r\n                            //  any|filled-input\r\n                            // <-\r\n                            //  any|first not empty is not-len-aligned\r\n                            //  not-0-aligned|any\r\n                            // ->\r\n                            //  any|not-len-aligned or end\r\n                            // check if first block at right is filled input\r\n                            var firstFilledBlockIndexAtRight;\r\n\r\n                            for (var _bi2 = searchBlockIndex; _bi2 < this._blocks.length; ++_bi2) {\r\n                                if (this._blocks[_bi2].value) {\r\n                                    firstFilledBlockIndexAtRight = _bi2;\r\n                                    break;\r\n                                }\r\n                            }\r\n\r\n                            if (firstFilledBlockIndexAtRight != null) {\r\n                                var filledBlock = this._blocks[firstFilledBlockIndexAtRight];\r\n\r\n                                var _blockInputPos3 = filledBlock.nearestInputPos(0, DIRECTION.RIGHT);\r\n\r\n                                if (_blockInputPos3 === 0 && filledBlock.unmaskedValue.length) {\r\n                                    // filled block is input\r\n                                    return this._blockStartPos(firstFilledBlockIndexAtRight) + _blockInputPos3;\r\n                                }\r\n                            } // <-\r\n                            // find this vars\r\n\r\n\r\n                            var firstFilledInputBlockIndex = -1;\r\n                            var firstEmptyInputBlockIndex; // TODO consider nested empty inputs\r\n\r\n                            for (var _bi3 = searchBlockIndex - 1; _bi3 >= 0; --_bi3) {\r\n                                var _block4 = this._blocks[_bi3];\r\n\r\n                                var _blockInputPos4 = _block4.nearestInputPos(_block4.value.length, DIRECTION.FORCE_LEFT);\r\n\r\n                                if (!_block4.value || _blockInputPos4 !== 0) firstEmptyInputBlockIndex = _bi3;\r\n\r\n                                if (_blockInputPos4 !== 0) {\r\n                                    if (_blockInputPos4 !== _block4.value.length) {\r\n                                        // aligned inside block - return immediately\r\n                                        return this._blockStartPos(_bi3) + _blockInputPos4;\r\n                                    } else {\r\n                                        // found filled\r\n                                        firstFilledInputBlockIndex = _bi3;\r\n                                        break;\r\n                                    }\r\n                                }\r\n                            }\r\n\r\n                            if (direction === DIRECTION.LEFT) {\r\n                                // try find first empty input before start searching position only when not forced\r\n                                for (var _bi4 = firstFilledInputBlockIndex + 1; _bi4 <= Math.min(searchBlockIndex, this._blocks.length - 1); ++_bi4) {\r\n                                    var _block5 = this._blocks[_bi4];\r\n\r\n                                    var _blockInputPos5 = _block5.nearestInputPos(0, DIRECTION.NONE);\r\n\r\n                                    var blockAlignedPos = this._blockStartPos(_bi4) + _blockInputPos5;\r\n\r\n                                    if (blockAlignedPos > cursorPos) break; // if block is not lazy input\r\n\r\n                                    if (_blockInputPos5 !== _block5.value.length) return blockAlignedPos;\r\n                                }\r\n                            } // process overflow\r\n\r\n\r\n                            if (firstFilledInputBlockIndex >= 0) {\r\n                                return this._blockStartPos(firstFilledInputBlockIndex) + this._blocks[firstFilledInputBlockIndex].value.length;\r\n                            } // for lazy if has aligned left inside fixed and has came to the start - use start position\r\n\r\n\r\n                            if (direction === DIRECTION.FORCE_LEFT || this.lazy && !this.extractInput() && !isInput(this._blocks[searchBlockIndex])) {\r\n                                return 0;\r\n                            }\r\n\r\n                            if (firstEmptyInputBlockIndex != null) {\r\n                                return this._blockStartPos(firstEmptyInputBlockIndex);\r\n                            } // find first input\r\n\r\n\r\n                            for (var _bi5 = searchBlockIndex; _bi5 < this._blocks.length; ++_bi5) {\r\n                                var _block6 = this._blocks[_bi5];\r\n\r\n                                var _blockInputPos6 = _block6.nearestInputPos(0, DIRECTION.NONE); // is input\r\n\r\n\r\n                                if (!_block6.value.length || _blockInputPos6 !== _block6.value.length) {\r\n                                    return this._blockStartPos(_bi5) + _blockInputPos6;\r\n                                }\r\n                            }\r\n\r\n                            return 0;\r\n                        }\r\n\r\n                        if (direction === DIRECTION.RIGHT || direction === DIRECTION.FORCE_RIGHT) {\r\n                            // ->\r\n                            //  any|not-len-aligned and filled\r\n                            //  any|not-len-aligned\r\n                            // <-\r\n                            //  not-0-aligned or start|any\r\n                            var firstInputBlockAlignedIndex;\r\n                            var firstInputBlockAlignedPos;\r\n\r\n                            for (var _bi6 = searchBlockIndex; _bi6 < this._blocks.length; ++_bi6) {\r\n                                var _block7 = this._blocks[_bi6];\r\n\r\n                                var _blockInputPos7 = _block7.nearestInputPos(0, DIRECTION.NONE);\r\n\r\n                                if (_blockInputPos7 !== _block7.value.length) {\r\n                                    firstInputBlockAlignedPos = this._blockStartPos(_bi6) + _blockInputPos7;\r\n                                    firstInputBlockAlignedIndex = _bi6;\r\n                                    break;\r\n                                }\r\n                            }\r\n\r\n                            if (firstInputBlockAlignedIndex != null && firstInputBlockAlignedPos != null) {\r\n                                for (var _bi7 = firstInputBlockAlignedIndex; _bi7 < this._blocks.length; ++_bi7) {\r\n                                    var _block8 = this._blocks[_bi7];\r\n\r\n                                    var _blockInputPos8 = _block8.nearestInputPos(0, DIRECTION.FORCE_RIGHT);\r\n\r\n                                    if (_blockInputPos8 !== _block8.value.length) {\r\n                                        return this._blockStartPos(_bi7) + _blockInputPos8;\r\n                                    }\r\n                                }\r\n\r\n                                return direction === DIRECTION.FORCE_RIGHT ? this.value.length : firstInputBlockAlignedPos;\r\n                            }\r\n\r\n                            for (var _bi8 = Math.min(searchBlockIndex, this._blocks.length - 1); _bi8 >= 0; --_bi8) {\r\n                                var _block9 = this._blocks[_bi8];\r\n\r\n                                var _blockInputPos9 = _block9.nearestInputPos(_block9.value.length, DIRECTION.LEFT);\r\n\r\n                                if (_blockInputPos9 !== 0) {\r\n                                    var alignedPos = this._blockStartPos(_bi8) + _blockInputPos9;\r\n\r\n                                    if (alignedPos >= cursorPos) return alignedPos;\r\n                                    break;\r\n                                }\r\n                            }\r\n                        }\r\n\r\n                        return cursorPos;\r\n                    }\r\n                    /** Get block by name */\r\n\r\n                }, {\r\n                    key: \"maskedBlock\",\r\n                    value: function maskedBlock(name) {\r\n                        return this.maskedBlocks(name)[0];\r\n                    }\r\n                    /** Get all blocks by name */\r\n\r\n                }, {\r\n                    key: \"maskedBlocks\",\r\n                    value: function maskedBlocks(name) {\r\n                        var _this4 = this;\r\n\r\n                        var indices = this._maskedBlocks[name];\r\n                        if (!indices) return [];\r\n                        return indices.map(function (gi) {\r\n                            return _this4._blocks[gi];\r\n                        });\r\n                    }\r\n                }]);\r\n\r\n                return MaskedPattern;\r\n            }(Masked);\r\n            MaskedPattern.DEFAULTS = {\r\n                lazy: true,\r\n                placeholderChar: '_'\r\n            };\r\n            MaskedPattern.STOP_CHAR = '`';\r\n            MaskedPattern.ESCAPE_CHAR = '\\\\';\r\n            MaskedPattern.InputDefinition = PatternInputDefinition;\r\n            MaskedPattern.FixedDefinition = PatternFixedDefinition;\r\n\r\n            function isInput(block) {\r\n                if (!block) return false;\r\n                var value = block.value;\r\n                return !value || block.nearestInputPos(0, DIRECTION.NONE) !== value.length;\r\n            }\r\n\r\n            IMask.MaskedPattern = MaskedPattern;\r\n\r\n            /** Pattern which accepts ranges */\r\n\r\n            var MaskedRange = /*#__PURE__*/function (_MaskedPattern) {\r\n                _inherits(MaskedRange, _MaskedPattern);\r\n\r\n                var _super = _createSuper(MaskedRange);\r\n\r\n                function MaskedRange() {\r\n                    _classCallCheck(this, MaskedRange);\r\n\r\n                    return _super.apply(this, arguments);\r\n                }\r\n\r\n                _createClass(MaskedRange, [{\r\n                    key: \"_matchFrom\",\r\n                    get:\r\n                    /**\r\n                     Optionally sets max length of pattern.\r\n                     Used when pattern length is longer then `to` param length. Pads zeros at start in this case.\r\n                     */\r\n\r\n                    /** Min bound */\r\n\r\n                    /** Max bound */\r\n\r\n                        /** */\r\n                        function get() {\r\n                            return this.maxLength - String(this.from).length;\r\n                        }\r\n                    /**\r\n                     @override\r\n                     */\r\n\r\n                }, {\r\n                    key: \"_update\",\r\n                    value: function _update(opts) {\r\n                        // TODO type\r\n                        opts = Object.assign({\r\n                            to: this.to || 0,\r\n                            from: this.from || 0\r\n                        }, opts);\r\n                        var maxLength = String(opts.to).length;\r\n                        if (opts.maxLength != null) maxLength = Math.max(maxLength, opts.maxLength);\r\n                        opts.maxLength = maxLength;\r\n                        var fromStr = String(opts.from).padStart(maxLength, '0');\r\n                        var toStr = String(opts.to).padStart(maxLength, '0');\r\n                        var sameCharsCount = 0;\r\n\r\n                        while (sameCharsCount < toStr.length && toStr[sameCharsCount] === fromStr[sameCharsCount]) {\r\n                            ++sameCharsCount;\r\n                        }\r\n\r\n                        opts.mask = toStr.slice(0, sameCharsCount).replace(/0/g, '\\\\0') + '0'.repeat(maxLength - sameCharsCount);\r\n\r\n                        _get(_getPrototypeOf(MaskedRange.prototype), \"_update\", this).call(this, opts);\r\n                    }\r\n                    /**\r\n                     @override\r\n                     */\r\n\r\n                }, {\r\n                    key: \"isComplete\",\r\n                    get: function get() {\r\n                        return _get(_getPrototypeOf(MaskedRange.prototype), \"isComplete\", this) && Boolean(this.value);\r\n                    }\r\n                }, {\r\n                    key: \"boundaries\",\r\n                    value: function boundaries(str) {\r\n                        var minstr = '';\r\n                        var maxstr = '';\r\n\r\n                        var _ref = str.match(/^(\\D*)(\\d*)(\\D*)/) || [],\r\n                            _ref2 = _slicedToArray(_ref, 3),\r\n                            placeholder = _ref2[1],\r\n                            num = _ref2[2];\r\n\r\n                        if (num) {\r\n                            minstr = '0'.repeat(placeholder.length) + num;\r\n                            maxstr = '9'.repeat(placeholder.length) + num;\r\n                        }\r\n\r\n                        minstr = minstr.padEnd(this.maxLength, '0');\r\n                        maxstr = maxstr.padEnd(this.maxLength, '9');\r\n                        return [minstr, maxstr];\r\n                    }\r\n                    /**\r\n                     @override\r\n                     */\r\n\r\n                }, {\r\n                    key: \"doPrepare\",\r\n                    value: function doPrepare(str) {\r\n                        var flags = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\r\n                        str = _get(_getPrototypeOf(MaskedRange.prototype), \"doPrepare\", this).call(this, str, flags).replace(/\\D/g, '');\r\n                        if (!this.autofix) return str;\r\n                        var fromStr = String(this.from).padStart(this.maxLength, '0');\r\n                        var toStr = String(this.to).padStart(this.maxLength, '0');\r\n                        var val = this.value;\r\n                        var prepStr = '';\r\n\r\n                        for (var ci = 0; ci < str.length; ++ci) {\r\n                            var nextVal = val + prepStr + str[ci];\r\n\r\n                            var _this$boundaries = this.boundaries(nextVal),\r\n                                _this$boundaries2 = _slicedToArray(_this$boundaries, 2),\r\n                                minstr = _this$boundaries2[0],\r\n                                maxstr = _this$boundaries2[1];\r\n\r\n                            if (Number(maxstr) < this.from) prepStr += fromStr[nextVal.length - 1]; else if (Number(minstr) > this.to) prepStr += toStr[nextVal.length - 1]; else prepStr += str[ci];\r\n                        }\r\n\r\n                        return prepStr;\r\n                    }\r\n                    /**\r\n                     @override\r\n                     */\r\n\r\n                }, {\r\n                    key: \"doValidate\",\r\n                    value: function doValidate() {\r\n                        var _get2;\r\n\r\n                        var str = this.value;\r\n                        var firstNonZero = str.search(/[^0]/);\r\n                        if (firstNonZero === -1 && str.length <= this._matchFrom) return true;\r\n\r\n                        var _this$boundaries3 = this.boundaries(str),\r\n                            _this$boundaries4 = _slicedToArray(_this$boundaries3, 2),\r\n                            minstr = _this$boundaries4[0],\r\n                            maxstr = _this$boundaries4[1];\r\n\r\n                        for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\r\n                            args[_key] = arguments[_key];\r\n                        }\r\n\r\n                        return this.from <= Number(maxstr) && Number(minstr) <= this.to && (_get2 = _get(_getPrototypeOf(MaskedRange.prototype), \"doValidate\", this)).call.apply(_get2, [this].concat(args));\r\n                    }\r\n                }]);\r\n\r\n                return MaskedRange;\r\n            }(MaskedPattern);\r\n            IMask.MaskedRange = MaskedRange;\r\n\r\n            /** Date mask */\r\n\r\n            var MaskedDate = /*#__PURE__*/function (_MaskedPattern) {\r\n                _inherits(MaskedDate, _MaskedPattern);\r\n\r\n                var _super = _createSuper(MaskedDate);\r\n\r\n                /** Pattern mask for date according to {@link MaskedDate#format} */\r\n\r\n                /** Start date */\r\n\r\n                /** End date */\r\n\r\n                /** */\r\n\r\n                /**\r\n                 @param {Object} opts\r\n                 */\r\n                function MaskedDate(opts) {\r\n                    _classCallCheck(this, MaskedDate);\r\n\r\n                    return _super.call(this, Object.assign({}, MaskedDate.DEFAULTS, opts));\r\n                }\r\n\r\n                /**\r\n                 @override\r\n                 */\r\n\r\n\r\n                _createClass(MaskedDate, [{\r\n                    key: \"_update\",\r\n                    value: function _update(opts) {\r\n                        if (opts.mask === Date) delete opts.mask;\r\n                        if (opts.pattern) opts.mask = opts.pattern;\r\n                        var blocks = opts.blocks;\r\n                        opts.blocks = Object.assign({}, MaskedDate.GET_DEFAULT_BLOCKS()); // adjust year block\r\n\r\n                        if (opts.min) opts.blocks.Y.from = opts.min.getFullYear();\r\n                        if (opts.max) opts.blocks.Y.to = opts.max.getFullYear();\r\n\r\n                        if (opts.min && opts.max && opts.blocks.Y.from === opts.blocks.Y.to) {\r\n                            opts.blocks.m.from = opts.min.getMonth() + 1;\r\n                            opts.blocks.m.to = opts.max.getMonth() + 1;\r\n\r\n                            if (opts.blocks.m.from === opts.blocks.m.to) {\r\n                                opts.blocks.d.from = opts.min.getDate();\r\n                                opts.blocks.d.to = opts.max.getDate();\r\n                            }\r\n                        }\r\n\r\n                        Object.assign(opts.blocks, blocks); // add autofix\r\n\r\n                        Object.keys(opts.blocks).forEach(function (bk) {\r\n                            var b = opts.blocks[bk];\r\n                            if (!('autofix' in b)) b.autofix = opts.autofix;\r\n                        });\r\n\r\n                        _get(_getPrototypeOf(MaskedDate.prototype), \"_update\", this).call(this, opts);\r\n                    }\r\n                    /**\r\n                     @override\r\n                     */\r\n\r\n                }, {\r\n                    key: \"doValidate\",\r\n                    value: function doValidate() {\r\n                        var _get2;\r\n\r\n                        var date = this.date;\r\n\r\n                        for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\r\n                            args[_key] = arguments[_key];\r\n                        }\r\n\r\n                        return (_get2 = _get(_getPrototypeOf(MaskedDate.prototype), \"doValidate\", this)).call.apply(_get2, [this].concat(args)) && (!this.isComplete || this.isDateExist(this.value) && date != null && (this.min == null || this.min <= date) && (this.max == null || date <= this.max));\r\n                    }\r\n                    /** Checks if date is exists */\r\n\r\n                }, {\r\n                    key: \"isDateExist\",\r\n                    value: function isDateExist(str) {\r\n                        return this.format(this.parse(str, this), this).indexOf(str) >= 0;\r\n                    }\r\n                    /** Parsed Date */\r\n\r\n                }, {\r\n                    key: \"date\",\r\n                    get: function get() {\r\n                        return this.typedValue;\r\n                    },\r\n                    set: function set(date) {\r\n                        this.typedValue = date;\r\n                    }\r\n                    /**\r\n                     @override\r\n                     */\r\n\r\n                }, {\r\n                    key: \"typedValue\",\r\n                    get: function get() {\r\n                        return this.isComplete ? _get(_getPrototypeOf(MaskedDate.prototype), \"typedValue\", this) : null;\r\n                    },\r\n                    set: function set(value) {\r\n                        _set(_getPrototypeOf(MaskedDate.prototype), \"typedValue\", value, this, true);\r\n                    }\r\n                }]);\r\n\r\n                return MaskedDate;\r\n            }(MaskedPattern);\r\n            MaskedDate.DEFAULTS = {\r\n                pattern: 'd{.}`m{.}`Y',\r\n                format: function format(date) {\r\n                    var day = String(date.getDate()).padStart(2, '0');\r\n                    var month = String(date.getMonth() + 1).padStart(2, '0');\r\n                    var year = date.getFullYear();\r\n                    return [day, month, year].join('.');\r\n                },\r\n                parse: function parse(str) {\r\n                    var _str$split = str.split('.'),\r\n                        _str$split2 = _slicedToArray(_str$split, 3),\r\n                        day = _str$split2[0],\r\n                        month = _str$split2[1],\r\n                        year = _str$split2[2];\r\n\r\n                    return new Date(year, month - 1, day);\r\n                }\r\n            };\r\n\r\n            MaskedDate.GET_DEFAULT_BLOCKS = function () {\r\n                return {\r\n                    d: {\r\n                        mask: MaskedRange,\r\n                        from: 1,\r\n                        to: 31,\r\n                        maxLength: 2\r\n                    },\r\n                    m: {\r\n                        mask: MaskedRange,\r\n                        from: 1,\r\n                        to: 12,\r\n                        maxLength: 2\r\n                    },\r\n                    Y: {\r\n                        mask: MaskedRange,\r\n                        from: 1900,\r\n                        to: 9999\r\n                    }\r\n                };\r\n            };\r\n\r\n            IMask.MaskedDate = MaskedDate;\r\n\r\n            /**\r\n             Generic element API to use with mask\r\n             @interface\r\n             */\r\n            var MaskElement = /*#__PURE__*/function () {\r\n                function MaskElement() {\r\n                    _classCallCheck(this, MaskElement);\r\n                }\r\n\r\n                _createClass(MaskElement, [{\r\n                    key: \"selectionStart\",\r\n                    get:\r\n                    /** */\r\n\r\n                    /** */\r\n\r\n                    /** */\r\n\r\n                        /** Safely returns selection start */\r\n                        function get() {\r\n                            var start;\r\n\r\n                            try {\r\n                                start = this._unsafeSelectionStart;\r\n                            } catch (e) {\r\n                            }\r\n\r\n                            return start != null ? start : this.value.length;\r\n                        }\r\n                    /** Safely returns selection end */\r\n\r\n                }, {\r\n                    key: \"selectionEnd\",\r\n                    get: function get() {\r\n                        var end;\r\n\r\n                        try {\r\n                            end = this._unsafeSelectionEnd;\r\n                        } catch (e) {\r\n                        }\r\n\r\n                        return end != null ? end : this.value.length;\r\n                    }\r\n                    /** Safely sets element selection */\r\n\r\n                }, {\r\n                    key: \"select\",\r\n                    value: function select(start, end) {\r\n                        if (start == null || end == null || start === this.selectionStart && end === this.selectionEnd) return;\r\n\r\n                        try {\r\n                            this._unsafeSelect(start, end);\r\n                        } catch (e) {\r\n                        }\r\n                    }\r\n                    /** Should be overriden in subclasses */\r\n\r\n                }, {\r\n                    key: \"_unsafeSelect\",\r\n                    value: function _unsafeSelect(start, end) {\r\n                    }\r\n                    /** Should be overriden in subclasses */\r\n\r\n                }, {\r\n                    key: \"isActive\",\r\n                    get: function get() {\r\n                        return false;\r\n                    }\r\n                    /** Should be overriden in subclasses */\r\n\r\n                }, {\r\n                    key: \"bindEvents\",\r\n                    value: function bindEvents(handlers) {\r\n                    }\r\n                    /** Should be overriden in subclasses */\r\n\r\n                }, {\r\n                    key: \"unbindEvents\",\r\n                    value: function unbindEvents() {\r\n                    }\r\n                }]);\r\n\r\n                return MaskElement;\r\n            }();\r\n            IMask.MaskElement = MaskElement;\r\n\r\n            /** Bridge between HTMLElement and {@link Masked} */\r\n\r\n            var HTMLMaskElement = /*#__PURE__*/function (_MaskElement) {\r\n                _inherits(HTMLMaskElement, _MaskElement);\r\n\r\n                var _super = _createSuper(HTMLMaskElement);\r\n\r\n                /** Mapping between HTMLElement events and mask internal events */\r\n\r\n                /** HTMLElement to use mask on */\r\n\r\n                /**\r\n                 @param {HTMLInputElement|HTMLTextAreaElement} input\r\n                 */\r\n                function HTMLMaskElement(input) {\r\n                    var _this;\r\n\r\n                    _classCallCheck(this, HTMLMaskElement);\r\n\r\n                    _this = _super.call(this);\r\n                    _this.input = input;\r\n                    _this._handlers = {};\r\n                    return _this;\r\n                }\r\n\r\n                /** */\r\n                // $FlowFixMe https://github.com/facebook/flow/issues/2839\r\n\r\n\r\n                _createClass(HTMLMaskElement, [{\r\n                    key: \"rootElement\",\r\n                    get: function get() {\r\n                        return this.input.getRootNode ? this.input.getRootNode() : document;\r\n                    }\r\n                    /**\r\n                     Is element in focus\r\n                     @readonly\r\n                     */\r\n\r\n                }, {\r\n                    key: \"isActive\",\r\n                    get: function get() {\r\n                        //$FlowFixMe\r\n                        return this.input === this.rootElement.activeElement;\r\n                    }\r\n                    /**\r\n                     Returns HTMLElement selection start\r\n                     @override\r\n                     */\r\n\r\n                }, {\r\n                    key: \"_unsafeSelectionStart\",\r\n                    get: function get() {\r\n                        return this.input.selectionStart;\r\n                    }\r\n                    /**\r\n                     Returns HTMLElement selection end\r\n                     @override\r\n                     */\r\n\r\n                }, {\r\n                    key: \"_unsafeSelectionEnd\",\r\n                    get: function get() {\r\n                        return this.input.selectionEnd;\r\n                    }\r\n                    /**\r\n                     Sets HTMLElement selection\r\n                     @override\r\n                     */\r\n\r\n                }, {\r\n                    key: \"_unsafeSelect\",\r\n                    value: function _unsafeSelect(start, end) {\r\n                        this.input.setSelectionRange(start, end);\r\n                    }\r\n                    /**\r\n                     HTMLElement value\r\n                     @override\r\n                     */\r\n\r\n                }, {\r\n                    key: \"value\",\r\n                    get: function get() {\r\n                        return this.input.value;\r\n                    },\r\n                    set: function set(value) {\r\n                        this.input.value = value;\r\n                    }\r\n                    /**\r\n                     Binds HTMLElement events to mask internal events\r\n                     @override\r\n                     */\r\n\r\n                }, {\r\n                    key: \"bindEvents\",\r\n                    value: function bindEvents(handlers) {\r\n                        var _this2 = this;\r\n\r\n                        Object.keys(handlers).forEach(function (event) {\r\n                            return _this2._toggleEventHandler(HTMLMaskElement.EVENTS_MAP[event], handlers[event]);\r\n                        });\r\n                    }\r\n                    /**\r\n                     Unbinds HTMLElement events to mask internal events\r\n                     @override\r\n                     */\r\n\r\n                }, {\r\n                    key: \"unbindEvents\",\r\n                    value: function unbindEvents() {\r\n                        var _this3 = this;\r\n\r\n                        Object.keys(this._handlers).forEach(function (event) {\r\n                            return _this3._toggleEventHandler(event);\r\n                        });\r\n                    }\r\n                    /** */\r\n\r\n                }, {\r\n                    key: \"_toggleEventHandler\",\r\n                    value: function _toggleEventHandler(event, handler) {\r\n                        if (this._handlers[event]) {\r\n                            this.input.removeEventListener(event, this._handlers[event]);\r\n                            delete this._handlers[event];\r\n                        }\r\n\r\n                        if (handler) {\r\n                            this.input.addEventListener(event, handler);\r\n                            this._handlers[event] = handler;\r\n                        }\r\n                    }\r\n                }]);\r\n\r\n                return HTMLMaskElement;\r\n            }(MaskElement);\r\n            HTMLMaskElement.EVENTS_MAP = {\r\n                selectionChange: 'keydown',\r\n                input: 'input',\r\n                drop: 'drop',\r\n                click: 'click',\r\n                focus: 'focus',\r\n                commit: 'blur'\r\n            };\r\n            IMask.HTMLMaskElement = HTMLMaskElement;\r\n\r\n            var HTMLContenteditableMaskElement = /*#__PURE__*/function (_HTMLMaskElement) {\r\n                _inherits(HTMLContenteditableMaskElement, _HTMLMaskElement);\r\n\r\n                var _super = _createSuper(HTMLContenteditableMaskElement);\r\n\r\n                function HTMLContenteditableMaskElement() {\r\n                    _classCallCheck(this, HTMLContenteditableMaskElement);\r\n\r\n                    return _super.apply(this, arguments);\r\n                }\r\n\r\n                _createClass(HTMLContenteditableMaskElement, [{\r\n                    key: \"_unsafeSelectionStart\",\r\n                    get:\r\n                        /**\r\n                         Returns HTMLElement selection start\r\n                         @override\r\n                         */\r\n                        function get() {\r\n                            var root = this.rootElement;\r\n                            var selection = root.getSelection && root.getSelection();\r\n                            return selection && selection.anchorOffset;\r\n                        }\r\n                    /**\r\n                     Returns HTMLElement selection end\r\n                     @override\r\n                     */\r\n\r\n                }, {\r\n                    key: \"_unsafeSelectionEnd\",\r\n                    get: function get() {\r\n                        var root = this.rootElement;\r\n                        var selection = root.getSelection && root.getSelection();\r\n                        return selection && this._unsafeSelectionStart + String(selection).length;\r\n                    }\r\n                    /**\r\n                     Sets HTMLElement selection\r\n                     @override\r\n                     */\r\n\r\n                }, {\r\n                    key: \"_unsafeSelect\",\r\n                    value: function _unsafeSelect(start, end) {\r\n                        if (!this.rootElement.createRange) return;\r\n                        var range = this.rootElement.createRange();\r\n                        range.setStart(this.input.firstChild || this.input, start);\r\n                        range.setEnd(this.input.lastChild || this.input, end);\r\n                        var root = this.rootElement;\r\n                        var selection = root.getSelection && root.getSelection();\r\n\r\n                        if (selection) {\r\n                            selection.removeAllRanges();\r\n                            selection.addRange(range);\r\n                        }\r\n                    }\r\n                    /**\r\n                     HTMLElement value\r\n                     @override\r\n                     */\r\n\r\n                }, {\r\n                    key: \"value\",\r\n                    get: function get() {\r\n                        // $FlowFixMe\r\n                        return this.input.textContent;\r\n                    },\r\n                    set: function set(value) {\r\n                        this.input.textContent = value;\r\n                    }\r\n                }]);\r\n\r\n                return HTMLContenteditableMaskElement;\r\n            }(HTMLMaskElement);\r\n            IMask.HTMLContenteditableMaskElement = HTMLContenteditableMaskElement;\r\n\r\n            /** Listens to element events and controls changes between element and {@link Masked} */\r\n\r\n            var InputMask = /*#__PURE__*/function () {\r\n                /**\r\n                 View element\r\n                 @readonly\r\n                 */\r\n\r\n                /**\r\n                 Internal {@link Masked} model\r\n                 @readonly\r\n                 */\r\n\r\n                /**\r\n                 @param {MaskElement|HTMLInputElement|HTMLTextAreaElement} el\r\n                 @param {Object} opts\r\n                 */\r\n                function InputMask(el, opts) {\r\n                    _classCallCheck(this, InputMask);\r\n\r\n                    this.el = el instanceof MaskElement ? el : el.isContentEditable && el.tagName !== 'INPUT' && el.tagName !== 'TEXTAREA' ? new HTMLContenteditableMaskElement(el) : new HTMLMaskElement(el);\r\n                    this.masked = createMask(opts);\r\n                    this._listeners = {};\r\n                    this._value = '';\r\n                    this._unmaskedValue = '';\r\n                    this._saveSelection = this._saveSelection.bind(this);\r\n                    this._onInput = this._onInput.bind(this);\r\n                    this._onChange = this._onChange.bind(this);\r\n                    this._onDrop = this._onDrop.bind(this);\r\n                    this._onFocus = this._onFocus.bind(this);\r\n                    this._onClick = this._onClick.bind(this);\r\n                    this.alignCursor = this.alignCursor.bind(this);\r\n                    this.alignCursorFriendly = this.alignCursorFriendly.bind(this);\r\n\r\n                    this._bindEvents(); // refresh\r\n\r\n\r\n                    this.updateValue();\r\n\r\n                    this._onChange();\r\n                }\r\n\r\n                /** Read or update mask */\r\n\r\n\r\n                _createClass(InputMask, [{\r\n                    key: \"mask\",\r\n                    get: function get() {\r\n                        return this.masked.mask;\r\n                    },\r\n                    set: function set(mask) {\r\n                        if (this.maskEquals(mask)) return;\r\n\r\n                        if (!(mask instanceof IMask.Masked) && this.masked.constructor === maskedClass(mask)) {\r\n                            this.masked.updateOptions({\r\n                                mask: mask\r\n                            });\r\n                            return;\r\n                        }\r\n\r\n                        var masked = createMask({\r\n                            mask: mask\r\n                        });\r\n                        masked.unmaskedValue = this.masked.unmaskedValue;\r\n                        this.masked = masked;\r\n                    }\r\n                    /** Raw value */\r\n\r\n                }, {\r\n                    key: \"maskEquals\",\r\n                    value: function maskEquals(mask) {\r\n                        return mask == null || mask === this.masked.mask || mask === Date && this.masked instanceof MaskedDate;\r\n                    }\r\n                }, {\r\n                    key: \"value\",\r\n                    get: function get() {\r\n                        return this._value;\r\n                    },\r\n                    set: function set(str) {\r\n                        this.masked.value = str;\r\n                        this.updateControl();\r\n                        this.alignCursor();\r\n                    }\r\n                    /** Unmasked value */\r\n\r\n                }, {\r\n                    key: \"unmaskedValue\",\r\n                    get: function get() {\r\n                        return this._unmaskedValue;\r\n                    },\r\n                    set: function set(str) {\r\n                        this.masked.unmaskedValue = str;\r\n                        this.updateControl();\r\n                        this.alignCursor();\r\n                    }\r\n                    /** Typed unmasked value */\r\n\r\n                }, {\r\n                    key: \"typedValue\",\r\n                    get: function get() {\r\n                        return this.masked.typedValue;\r\n                    },\r\n                    set: function set(val) {\r\n                        this.masked.typedValue = val;\r\n                        this.updateControl();\r\n                        this.alignCursor();\r\n                    }\r\n                    /**\r\n                     Starts listening to element events\r\n                     @protected\r\n                     */\r\n\r\n                }, {\r\n                    key: \"_bindEvents\",\r\n                    value: function _bindEvents() {\r\n                        this.el.bindEvents({\r\n                            selectionChange: this._saveSelection,\r\n                            input: this._onInput,\r\n                            drop: this._onDrop,\r\n                            click: this._onClick,\r\n                            focus: this._onFocus,\r\n                            commit: this._onChange\r\n                        });\r\n                    }\r\n                    /**\r\n                     Stops listening to element events\r\n                     @protected\r\n                     */\r\n\r\n                }, {\r\n                    key: \"_unbindEvents\",\r\n                    value: function _unbindEvents() {\r\n                        if (this.el) this.el.unbindEvents();\r\n                    }\r\n                    /**\r\n                     Fires custom event\r\n                     @protected\r\n                     */\r\n\r\n                }, {\r\n                    key: \"_fireEvent\",\r\n                    value: function _fireEvent(ev) {\r\n                        for (var _len = arguments.length, args = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {\r\n                            args[_key - 1] = arguments[_key];\r\n                        }\r\n\r\n                        var listeners = this._listeners[ev];\r\n                        if (!listeners) return;\r\n                        listeners.forEach(function (l) {\r\n                            return l.apply(void 0, args);\r\n                        });\r\n                    }\r\n                    /**\r\n                     Current selection start\r\n                     @readonly\r\n                     */\r\n\r\n                }, {\r\n                    key: \"selectionStart\",\r\n                    get: function get() {\r\n                        return this._cursorChanging ? this._changingCursorPos : this.el.selectionStart;\r\n                    }\r\n                    /** Current cursor position */\r\n\r\n                }, {\r\n                    key: \"cursorPos\",\r\n                    get: function get() {\r\n                        return this._cursorChanging ? this._changingCursorPos : this.el.selectionEnd;\r\n                    },\r\n                    set: function set(pos) {\r\n                        if (!this.el || !this.el.isActive) return;\r\n                        this.el.select(pos, pos);\r\n\r\n                        this._saveSelection();\r\n                    }\r\n                    /**\r\n                     Stores current selection\r\n                     @protected\r\n                     */\r\n\r\n                }, {\r\n                    key: \"_saveSelection\",\r\n                    value: function _saveSelection()\r\n                        /* ev */ {\r\n                        if (this.value !== this.el.value) {\r\n                            console.warn('Element value was changed outside of mask. Syncronize mask using `mask.updateValue()` to work properly.'); // eslint-disable-line no-console\r\n                        }\r\n\r\n                        this._selection = {\r\n                            start: this.selectionStart,\r\n                            end: this.cursorPos\r\n                        };\r\n                    }\r\n                    /** Syncronizes model value from view */\r\n\r\n                }, {\r\n                    key: \"updateValue\",\r\n                    value: function updateValue() {\r\n                        this.masked.value = this.el.value;\r\n                        this._value = this.masked.value;\r\n                    }\r\n                    /** Syncronizes view from model value, fires change events */\r\n\r\n                }, {\r\n                    key: \"updateControl\",\r\n                    value: function updateControl() {\r\n                        var newUnmaskedValue = this.masked.unmaskedValue;\r\n                        var newValue = this.masked.value;\r\n                        var isChanged = this.unmaskedValue !== newUnmaskedValue || this.value !== newValue;\r\n                        this._unmaskedValue = newUnmaskedValue;\r\n                        this._value = newValue;\r\n                        if (this.el.value !== newValue) this.el.value = newValue;\r\n                        if (isChanged) this._fireChangeEvents();\r\n                    }\r\n                    /** Updates options with deep equal check, recreates @{link Masked} model if mask type changes */\r\n\r\n                }, {\r\n                    key: \"updateOptions\",\r\n                    value: function updateOptions(opts) {\r\n                        var mask = opts.mask,\r\n                            restOpts = _objectWithoutProperties(opts, [\"mask\"]);\r\n\r\n                        var updateMask = !this.maskEquals(mask);\r\n                        var updateOpts = !objectIncludes(this.masked, restOpts);\r\n                        if (updateMask) this.mask = mask;\r\n                        if (updateOpts) this.masked.updateOptions(restOpts);\r\n                        if (updateMask || updateOpts) this.updateControl();\r\n                    }\r\n                    /** Updates cursor */\r\n\r\n                }, {\r\n                    key: \"updateCursor\",\r\n                    value: function updateCursor(cursorPos) {\r\n                        if (cursorPos == null) return;\r\n                        this.cursorPos = cursorPos; // also queue change cursor for mobile browsers\r\n\r\n                        this._delayUpdateCursor(cursorPos);\r\n                    }\r\n                    /**\r\n                     Delays cursor update to support mobile browsers\r\n                     @private\r\n                     */\r\n\r\n                }, {\r\n                    key: \"_delayUpdateCursor\",\r\n                    value: function _delayUpdateCursor(cursorPos) {\r\n                        var _this = this;\r\n\r\n                        this._abortUpdateCursor();\r\n\r\n                        this._changingCursorPos = cursorPos;\r\n                        this._cursorChanging = setTimeout(function () {\r\n                            if (!_this.el) return; // if was destroyed\r\n\r\n                            _this.cursorPos = _this._changingCursorPos;\r\n\r\n                            _this._abortUpdateCursor();\r\n                        }, 10);\r\n                    }\r\n                    /**\r\n                     Fires custom events\r\n                     @protected\r\n                     */\r\n\r\n                }, {\r\n                    key: \"_fireChangeEvents\",\r\n                    value: function _fireChangeEvents() {\r\n                        this._fireEvent('accept', this._inputEvent);\r\n\r\n                        if (this.masked.isComplete) this._fireEvent('complete', this._inputEvent);\r\n                    }\r\n                    /**\r\n                     Aborts delayed cursor update\r\n                     @private\r\n                     */\r\n\r\n                }, {\r\n                    key: \"_abortUpdateCursor\",\r\n                    value: function _abortUpdateCursor() {\r\n                        if (this._cursorChanging) {\r\n                            clearTimeout(this._cursorChanging);\r\n                            delete this._cursorChanging;\r\n                        }\r\n                    }\r\n                    /** Aligns cursor to nearest available position */\r\n\r\n                }, {\r\n                    key: \"alignCursor\",\r\n                    value: function alignCursor() {\r\n                        this.cursorPos = this.masked.nearestInputPos(this.cursorPos, DIRECTION.LEFT);\r\n                    }\r\n                    /** Aligns cursor only if selection is empty */\r\n\r\n                }, {\r\n                    key: \"alignCursorFriendly\",\r\n                    value: function alignCursorFriendly() {\r\n                        if (this.selectionStart !== this.cursorPos) return; // skip if range is selected\r\n\r\n                        this.alignCursor();\r\n                    }\r\n                    /** Adds listener on custom event */\r\n\r\n                }, {\r\n                    key: \"on\",\r\n                    value: function on(ev, handler) {\r\n                        if (!this._listeners[ev]) this._listeners[ev] = [];\r\n\r\n                        this._listeners[ev].push(handler);\r\n\r\n                        return this;\r\n                    }\r\n                    /** Removes custom event listener */\r\n\r\n                }, {\r\n                    key: \"off\",\r\n                    value: function off(ev, handler) {\r\n                        if (!this._listeners[ev]) return this;\r\n\r\n                        if (!handler) {\r\n                            delete this._listeners[ev];\r\n                            return this;\r\n                        }\r\n\r\n                        var hIndex = this._listeners[ev].indexOf(handler);\r\n\r\n                        if (hIndex >= 0) this._listeners[ev].splice(hIndex, 1);\r\n                        return this;\r\n                    }\r\n                    /** Handles view input event */\r\n\r\n                }, {\r\n                    key: \"_onInput\",\r\n                    value: function _onInput(e) {\r\n                        this._inputEvent = e;\r\n\r\n                        this._abortUpdateCursor(); // fix strange IE behavior\r\n\r\n\r\n                        if (!this._selection) return this.updateValue();\r\n                        var details = new ActionDetails( // new state\r\n                            this.el.value, this.cursorPos, // old state\r\n                            this.value, this._selection);\r\n                        var oldRawValue = this.masked.rawInputValue;\r\n                        var offset = this.masked.splice(details.startChangePos, details.removed.length, details.inserted, details.removeDirection).offset; // force align in remove direction only if no input chars were removed\r\n                        // otherwise we still need to align with NONE (to get out from fixed symbols for instance)\r\n\r\n                        var removeDirection = oldRawValue === this.masked.rawInputValue ? details.removeDirection : DIRECTION.NONE;\r\n                        var cursorPos = this.masked.nearestInputPos(details.startChangePos + offset, removeDirection);\r\n                        this.updateControl();\r\n                        this.updateCursor(cursorPos);\r\n                        delete this._inputEvent;\r\n                    }\r\n                    /** Handles view change event and commits model value */\r\n\r\n                }, {\r\n                    key: \"_onChange\",\r\n                    value: function _onChange() {\r\n                        if (this.value !== this.el.value) {\r\n                            this.updateValue();\r\n                        }\r\n\r\n                        this.masked.doCommit();\r\n                        this.updateControl();\r\n\r\n                        this._saveSelection();\r\n                    }\r\n                    /** Handles view drop event, prevents by default */\r\n\r\n                }, {\r\n                    key: \"_onDrop\",\r\n                    value: function _onDrop(ev) {\r\n                        ev.preventDefault();\r\n                        ev.stopPropagation();\r\n                    }\r\n                    /** Restore last selection on focus */\r\n\r\n                }, {\r\n                    key: \"_onFocus\",\r\n                    value: function _onFocus(ev) {\r\n                        this.alignCursorFriendly();\r\n                    }\r\n                    /** Restore last selection on focus */\r\n\r\n                }, {\r\n                    key: \"_onClick\",\r\n                    value: function _onClick(ev) {\r\n                        this.alignCursorFriendly();\r\n                    }\r\n                    /** Unbind view events and removes element reference */\r\n\r\n                }, {\r\n                    key: \"destroy\",\r\n                    value: function destroy() {\r\n                        this._unbindEvents(); // $FlowFixMe why not do so?\r\n\r\n\r\n                        this._listeners.length = 0; // $FlowFixMe\r\n\r\n                        delete this.el;\r\n                    }\r\n                }]);\r\n\r\n                return InputMask;\r\n            }();\r\n            IMask.InputMask = InputMask;\r\n\r\n            /** Pattern which validates enum values */\r\n\r\n            var MaskedEnum = /*#__PURE__*/function (_MaskedPattern) {\r\n                _inherits(MaskedEnum, _MaskedPattern);\r\n\r\n                var _super = _createSuper(MaskedEnum);\r\n\r\n                function MaskedEnum() {\r\n                    _classCallCheck(this, MaskedEnum);\r\n\r\n                    return _super.apply(this, arguments);\r\n                }\r\n\r\n                _createClass(MaskedEnum, [{\r\n                    key: \"_update\",\r\n                    value:\r\n                        /**\r\n                         @override\r\n                         @param {Object} opts\r\n                         */\r\n                        function _update(opts) {\r\n                            // TODO type\r\n                            if (opts.enum) opts.mask = '*'.repeat(opts.enum[0].length);\r\n\r\n                            _get(_getPrototypeOf(MaskedEnum.prototype), \"_update\", this).call(this, opts);\r\n                        }\r\n                    /**\r\n                     @override\r\n                     */\r\n\r\n                }, {\r\n                    key: \"doValidate\",\r\n                    value: function doValidate() {\r\n                        var _this = this,\r\n                            _get2;\r\n\r\n                        for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\r\n                            args[_key] = arguments[_key];\r\n                        }\r\n\r\n                        return this.enum.some(function (e) {\r\n                            return e.indexOf(_this.unmaskedValue) >= 0;\r\n                        }) && (_get2 = _get(_getPrototypeOf(MaskedEnum.prototype), \"doValidate\", this)).call.apply(_get2, [this].concat(args));\r\n                    }\r\n                }]);\r\n\r\n                return MaskedEnum;\r\n            }(MaskedPattern);\r\n            IMask.MaskedEnum = MaskedEnum;\r\n\r\n            /**\r\n             Number mask\r\n             @param {Object} opts\r\n             @param {string} opts.radix - Single char\r\n             @param {string} opts.thousandsSeparator - Single char\r\n             @param {Array<string>} opts.mapToRadix - Array of single chars\r\n             @param {number} opts.min\r\n             @param {number} opts.max\r\n             @param {number} opts.scale - Digits after point\r\n             @param {boolean} opts.signed - Allow negative\r\n             @param {boolean} opts.normalizeZeros - Flag to remove leading and trailing zeros in the end of editing\r\n             @param {boolean} opts.padFractionalZeros - Flag to pad trailing zeros after point in the end of editing\r\n             */\r\n            var MaskedNumber = /*#__PURE__*/function (_Masked) {\r\n                _inherits(MaskedNumber, _Masked);\r\n\r\n                var _super = _createSuper(MaskedNumber);\r\n\r\n                /** Single char */\r\n\r\n                /** Single char */\r\n\r\n                /** Array of single chars */\r\n\r\n                /** */\r\n\r\n                /** */\r\n\r\n                /** Digits after point */\r\n\r\n                /** */\r\n\r\n                /** Flag to remove leading and trailing zeros in the end of editing */\r\n\r\n                /** Flag to pad trailing zeros after point in the end of editing */\r\n                function MaskedNumber(opts) {\r\n                    _classCallCheck(this, MaskedNumber);\r\n\r\n                    return _super.call(this, Object.assign({}, MaskedNumber.DEFAULTS, opts));\r\n                }\r\n\r\n                /**\r\n                 @override\r\n                 */\r\n\r\n\r\n                _createClass(MaskedNumber, [{\r\n                    key: \"_update\",\r\n                    value: function _update(opts) {\r\n                        _get(_getPrototypeOf(MaskedNumber.prototype), \"_update\", this).call(this, opts);\r\n\r\n                        this._updateRegExps();\r\n                    }\r\n                    /** */\r\n\r\n                }, {\r\n                    key: \"_updateRegExps\",\r\n                    value: function _updateRegExps() {\r\n                        // use different regexp to process user input (more strict, input suffix) and tail shifting\r\n                        var start = '^' + (this.allowNegative ? '[+|\\\\-]?' : '');\r\n                        var midInput = '(0|([1-9]+\\\\d*))?';\r\n                        var mid = '\\\\d*';\r\n                        var end = (this.scale ? '(' + escapeRegExp(this.radix) + '\\\\d{0,' + this.scale + '})?' : '') + '$';\r\n                        this._numberRegExpInput = new RegExp(start + midInput + end);\r\n                        this._numberRegExp = new RegExp(start + mid + end);\r\n                        this._mapToRadixRegExp = new RegExp('[' + this.mapToRadix.map(escapeRegExp).join('') + ']', 'g');\r\n                        this._thousandsSeparatorRegExp = new RegExp(escapeRegExp(this.thousandsSeparator), 'g');\r\n                    }\r\n                    /** */\r\n\r\n                }, {\r\n                    key: \"_removeThousandsSeparators\",\r\n                    value: function _removeThousandsSeparators(value) {\r\n                        return value.replace(this._thousandsSeparatorRegExp, '');\r\n                    }\r\n                    /** */\r\n\r\n                }, {\r\n                    key: \"_insertThousandsSeparators\",\r\n                    value: function _insertThousandsSeparators(value) {\r\n                        // https://stackoverflow.com/questions/2901102/how-to-print-a-number-with-commas-as-thousands-separators-in-javascript\r\n                        var parts = value.split(this.radix);\r\n                        parts[0] = parts[0].replace(/\\B(?=(\\d{3})+(?!\\d))/g, this.thousandsSeparator);\r\n                        return parts.join(this.radix);\r\n                    }\r\n                    /**\r\n                     @override\r\n                     */\r\n\r\n                }, {\r\n                    key: \"doPrepare\",\r\n                    value: function doPrepare(str) {\r\n                        var _get2;\r\n\r\n                        for (var _len = arguments.length, args = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {\r\n                            args[_key - 1] = arguments[_key];\r\n                        }\r\n\r\n                        return (_get2 = _get(_getPrototypeOf(MaskedNumber.prototype), \"doPrepare\", this)).call.apply(_get2, [this, this._removeThousandsSeparators(str.replace(this._mapToRadixRegExp, this.radix))].concat(args));\r\n                    }\r\n                    /** */\r\n\r\n                }, {\r\n                    key: \"_separatorsCount\",\r\n                    value: function _separatorsCount(to) {\r\n                        var extendOnSeparators = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;\r\n                        var count = 0;\r\n\r\n                        for (var pos = 0; pos < to; ++pos) {\r\n                            if (this._value.indexOf(this.thousandsSeparator, pos) === pos) {\r\n                                ++count;\r\n                                if (extendOnSeparators) to += this.thousandsSeparator.length;\r\n                            }\r\n                        }\r\n\r\n                        return count;\r\n                    }\r\n                    /** */\r\n\r\n                }, {\r\n                    key: \"_separatorsCountFromSlice\",\r\n                    value: function _separatorsCountFromSlice() {\r\n                        var slice = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : this._value;\r\n                        return this._separatorsCount(this._removeThousandsSeparators(slice).length, true);\r\n                    }\r\n                    /**\r\n                     @override\r\n                     */\r\n\r\n                }, {\r\n                    key: \"extractInput\",\r\n                    value: function extractInput() {\r\n                        var fromPos = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 0;\r\n                        var toPos = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : this.value.length;\r\n                        var flags = arguments.length > 2 ? arguments[2] : undefined;\r\n\r\n                        var _this$_adjustRangeWit = this._adjustRangeWithSeparators(fromPos, toPos);\r\n\r\n                        var _this$_adjustRangeWit2 = _slicedToArray(_this$_adjustRangeWit, 2);\r\n\r\n                        fromPos = _this$_adjustRangeWit2[0];\r\n                        toPos = _this$_adjustRangeWit2[1];\r\n                        return this._removeThousandsSeparators(_get(_getPrototypeOf(MaskedNumber.prototype), \"extractInput\", this).call(this, fromPos, toPos, flags));\r\n                    }\r\n                    /**\r\n                     @override\r\n                     */\r\n\r\n                }, {\r\n                    key: \"_appendCharRaw\",\r\n                    value: function _appendCharRaw(ch) {\r\n                        var flags = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\r\n                        if (!this.thousandsSeparator) return _get(_getPrototypeOf(MaskedNumber.prototype), \"_appendCharRaw\", this).call(this, ch, flags);\r\n                        var prevBeforeTailValue = flags.tail && flags._beforeTailState ? flags._beforeTailState._value : this._value;\r\n\r\n                        var prevBeforeTailSeparatorsCount = this._separatorsCountFromSlice(prevBeforeTailValue);\r\n\r\n                        this._value = this._removeThousandsSeparators(this.value);\r\n\r\n                        var appendDetails = _get(_getPrototypeOf(MaskedNumber.prototype), \"_appendCharRaw\", this).call(this, ch, flags);\r\n\r\n                        this._value = this._insertThousandsSeparators(this._value);\r\n                        var beforeTailValue = flags.tail && flags._beforeTailState ? flags._beforeTailState._value : this._value;\r\n\r\n                        var beforeTailSeparatorsCount = this._separatorsCountFromSlice(beforeTailValue);\r\n\r\n                        appendDetails.tailShift += (beforeTailSeparatorsCount - prevBeforeTailSeparatorsCount) * this.thousandsSeparator.length;\r\n                        appendDetails.skip = !appendDetails.rawInserted && ch === this.thousandsSeparator;\r\n                        return appendDetails;\r\n                    }\r\n                    /** */\r\n\r\n                }, {\r\n                    key: \"_findSeparatorAround\",\r\n                    value: function _findSeparatorAround(pos) {\r\n                        if (this.thousandsSeparator) {\r\n                            var searchFrom = pos - this.thousandsSeparator.length + 1;\r\n                            var separatorPos = this.value.indexOf(this.thousandsSeparator, searchFrom);\r\n                            if (separatorPos <= pos) return separatorPos;\r\n                        }\r\n\r\n                        return -1;\r\n                    }\r\n                }, {\r\n                    key: \"_adjustRangeWithSeparators\",\r\n                    value: function _adjustRangeWithSeparators(from, to) {\r\n                        var separatorAroundFromPos = this._findSeparatorAround(from);\r\n\r\n                        if (separatorAroundFromPos >= 0) from = separatorAroundFromPos;\r\n\r\n                        var separatorAroundToPos = this._findSeparatorAround(to);\r\n\r\n                        if (separatorAroundToPos >= 0) to = separatorAroundToPos + this.thousandsSeparator.length;\r\n                        return [from, to];\r\n                    }\r\n                    /**\r\n                     @override\r\n                     */\r\n\r\n                }, {\r\n                    key: \"remove\",\r\n                    value: function remove() {\r\n                        var fromPos = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 0;\r\n                        var toPos = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : this.value.length;\r\n\r\n                        var _this$_adjustRangeWit3 = this._adjustRangeWithSeparators(fromPos, toPos);\r\n\r\n                        var _this$_adjustRangeWit4 = _slicedToArray(_this$_adjustRangeWit3, 2);\r\n\r\n                        fromPos = _this$_adjustRangeWit4[0];\r\n                        toPos = _this$_adjustRangeWit4[1];\r\n                        var valueBeforePos = this.value.slice(0, fromPos);\r\n                        var valueAfterPos = this.value.slice(toPos);\r\n\r\n                        var prevBeforeTailSeparatorsCount = this._separatorsCount(valueBeforePos.length);\r\n\r\n                        this._value = this._insertThousandsSeparators(this._removeThousandsSeparators(valueBeforePos + valueAfterPos));\r\n\r\n                        var beforeTailSeparatorsCount = this._separatorsCountFromSlice(valueBeforePos);\r\n\r\n                        return new ChangeDetails({\r\n                            tailShift: (beforeTailSeparatorsCount - prevBeforeTailSeparatorsCount) * this.thousandsSeparator.length\r\n                        });\r\n                    }\r\n                    /**\r\n                     @override\r\n                     */\r\n\r\n                }, {\r\n                    key: \"nearestInputPos\",\r\n                    value: function nearestInputPos(cursorPos, direction) {\r\n                        if (!this.thousandsSeparator) return cursorPos;\r\n\r\n                        switch (direction) {\r\n                            case DIRECTION.NONE:\r\n                            case DIRECTION.LEFT:\r\n                            case DIRECTION.FORCE_LEFT: {\r\n                                var separatorAtLeftPos = this._findSeparatorAround(cursorPos - 1);\r\n\r\n                                if (separatorAtLeftPos >= 0) {\r\n                                    var separatorAtLeftEndPos = separatorAtLeftPos + this.thousandsSeparator.length;\r\n\r\n                                    if (cursorPos < separatorAtLeftEndPos || this.value.length <= separatorAtLeftEndPos || direction === DIRECTION.FORCE_LEFT) {\r\n                                        return separatorAtLeftPos;\r\n                                    }\r\n                                }\r\n\r\n                                break;\r\n                            }\r\n\r\n                            case DIRECTION.RIGHT:\r\n                            case DIRECTION.FORCE_RIGHT: {\r\n                                var separatorAtRightPos = this._findSeparatorAround(cursorPos);\r\n\r\n                                if (separatorAtRightPos >= 0) {\r\n                                    return separatorAtRightPos + this.thousandsSeparator.length;\r\n                                }\r\n                            }\r\n                        }\r\n\r\n                        return cursorPos;\r\n                    }\r\n                    /**\r\n                     @override\r\n                     */\r\n\r\n                }, {\r\n                    key: \"doValidate\",\r\n                    value: function doValidate(flags) {\r\n                        var regexp = flags.input ? this._numberRegExpInput : this._numberRegExp; // validate as string\r\n\r\n                        var valid = regexp.test(this._removeThousandsSeparators(this.value));\r\n\r\n                        if (valid) {\r\n                            // validate as number\r\n                            var number = this.number;\r\n                            valid = valid && !isNaN(number) && ( // check min bound for negative values\r\n                                this.min == null || this.min >= 0 || this.min <= this.number) && ( // check max bound for positive values\r\n                                this.max == null || this.max <= 0 || this.number <= this.max);\r\n                        }\r\n\r\n                        return valid && _get(_getPrototypeOf(MaskedNumber.prototype), \"doValidate\", this).call(this, flags);\r\n                    }\r\n                    /**\r\n                     @override\r\n                     */\r\n\r\n                }, {\r\n                    key: \"doCommit\",\r\n                    value: function doCommit() {\r\n                        if (this.value) {\r\n                            var number = this.number;\r\n                            var validnum = number; // check bounds\r\n\r\n                            if (this.min != null) validnum = Math.max(validnum, this.min);\r\n                            if (this.max != null) validnum = Math.min(validnum, this.max);\r\n                            if (validnum !== number) this.unmaskedValue = String(validnum);\r\n                            var formatted = this.value;\r\n                            if (this.normalizeZeros) formatted = this._normalizeZeros(formatted);\r\n                            if (this.padFractionalZeros) formatted = this._padFractionalZeros(formatted);\r\n                            this._value = formatted;\r\n                        }\r\n\r\n                        _get(_getPrototypeOf(MaskedNumber.prototype), \"doCommit\", this).call(this);\r\n                    }\r\n                    /** */\r\n\r\n                }, {\r\n                    key: \"_normalizeZeros\",\r\n                    value: function _normalizeZeros(value) {\r\n                        var parts = this._removeThousandsSeparators(value).split(this.radix); // remove leading zeros\r\n\r\n\r\n                        parts[0] = parts[0].replace(/^(\\D*)(0*)(\\d*)/, function (match, sign, zeros, num) {\r\n                            return sign + num;\r\n                        }); // add leading zero\r\n\r\n                        if (value.length && !/\\d$/.test(parts[0])) parts[0] = parts[0] + '0';\r\n\r\n                        if (parts.length > 1) {\r\n                            parts[1] = parts[1].replace(/0*$/, ''); // remove trailing zeros\r\n\r\n                            if (!parts[1].length) parts.length = 1; // remove fractional\r\n                        }\r\n\r\n                        return this._insertThousandsSeparators(parts.join(this.radix));\r\n                    }\r\n                    /** */\r\n\r\n                }, {\r\n                    key: \"_padFractionalZeros\",\r\n                    value: function _padFractionalZeros(value) {\r\n                        if (!value) return value;\r\n                        var parts = value.split(this.radix);\r\n                        if (parts.length < 2) parts.push('');\r\n                        parts[1] = parts[1].padEnd(this.scale, '0');\r\n                        return parts.join(this.radix);\r\n                    }\r\n                    /**\r\n                     @override\r\n                     */\r\n\r\n                }, {\r\n                    key: \"unmaskedValue\",\r\n                    get: function get() {\r\n                        return this._removeThousandsSeparators(this._normalizeZeros(this.value)).replace(this.radix, '.');\r\n                    },\r\n                    set: function set(unmaskedValue) {\r\n                        _set(_getPrototypeOf(MaskedNumber.prototype), \"unmaskedValue\", unmaskedValue.replace('.', this.radix), this, true);\r\n                    }\r\n                    /**\r\n                     @override\r\n                     */\r\n\r\n                }, {\r\n                    key: \"typedValue\",\r\n                    get: function get() {\r\n                        return Number(this.unmaskedValue);\r\n                    },\r\n                    set: function set(n) {\r\n                        _set(_getPrototypeOf(MaskedNumber.prototype), \"unmaskedValue\", String(n), this, true);\r\n                    }\r\n                    /** Parsed Number */\r\n\r\n                }, {\r\n                    key: \"number\",\r\n                    get: function get() {\r\n                        return this.typedValue;\r\n                    },\r\n                    set: function set(number) {\r\n                        this.typedValue = number;\r\n                    }\r\n                    /**\r\n                     Is negative allowed\r\n                     @readonly\r\n                     */\r\n\r\n                }, {\r\n                    key: \"allowNegative\",\r\n                    get: function get() {\r\n                        return this.signed || this.min != null && this.min < 0 || this.max != null && this.max < 0;\r\n                    }\r\n                }]);\r\n\r\n                return MaskedNumber;\r\n            }(Masked);\r\n            MaskedNumber.DEFAULTS = {\r\n                radix: ',',\r\n                thousandsSeparator: '',\r\n                mapToRadix: ['.'],\r\n                scale: 2,\r\n                signed: false,\r\n                normalizeZeros: true,\r\n                padFractionalZeros: false\r\n            };\r\n            IMask.MaskedNumber = MaskedNumber;\r\n\r\n            /** Masking by custom Function */\r\n\r\n            var MaskedFunction = /*#__PURE__*/function (_Masked) {\r\n                _inherits(MaskedFunction, _Masked);\r\n\r\n                var _super = _createSuper(MaskedFunction);\r\n\r\n                function MaskedFunction() {\r\n                    _classCallCheck(this, MaskedFunction);\r\n\r\n                    return _super.apply(this, arguments);\r\n                }\r\n\r\n                _createClass(MaskedFunction, [{\r\n                    key: \"_update\",\r\n                    value:\r\n                        /**\r\n                         @override\r\n                         @param {Object} opts\r\n                         */\r\n                        function _update(opts) {\r\n                            if (opts.mask) opts.validate = opts.mask;\r\n\r\n                            _get(_getPrototypeOf(MaskedFunction.prototype), \"_update\", this).call(this, opts);\r\n                        }\r\n                }]);\r\n\r\n                return MaskedFunction;\r\n            }(Masked);\r\n            IMask.MaskedFunction = MaskedFunction;\r\n\r\n            /** Dynamic mask for choosing apropriate mask in run-time */\r\n            var MaskedDynamic = /*#__PURE__*/function (_Masked) {\r\n                _inherits(MaskedDynamic, _Masked);\r\n\r\n                var _super = _createSuper(MaskedDynamic);\r\n\r\n                /** Currently chosen mask */\r\n\r\n                /** Compliled {@link Masked} options */\r\n\r\n                /** Chooses {@link Masked} depending on input value */\r\n\r\n                /**\r\n                 @param {Object} opts\r\n                 */\r\n                function MaskedDynamic(opts) {\r\n                    var _this;\r\n\r\n                    _classCallCheck(this, MaskedDynamic);\r\n\r\n                    _this = _super.call(this, Object.assign({}, MaskedDynamic.DEFAULTS, opts));\r\n                    _this.currentMask = null;\r\n                    return _this;\r\n                }\r\n\r\n                /**\r\n                 @override\r\n                 */\r\n\r\n\r\n                _createClass(MaskedDynamic, [{\r\n                    key: \"_update\",\r\n                    value: function _update(opts) {\r\n                        _get(_getPrototypeOf(MaskedDynamic.prototype), \"_update\", this).call(this, opts);\r\n\r\n                        if ('mask' in opts) {\r\n                            // mask could be totally dynamic with only `dispatch` option\r\n                            this.compiledMasks = Array.isArray(opts.mask) ? opts.mask.map(function (m) {\r\n                                return createMask(m);\r\n                            }) : [];\r\n                        }\r\n                    }\r\n                    /**\r\n                     @override\r\n                     */\r\n\r\n                }, {\r\n                    key: \"_appendCharRaw\",\r\n                    value: function _appendCharRaw(ch) {\r\n                        var flags = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\r\n\r\n                        var details = this._applyDispatch(ch, flags);\r\n\r\n                        if (this.currentMask) {\r\n                            details.aggregate(this.currentMask._appendChar(ch, flags));\r\n                        }\r\n\r\n                        return details;\r\n                    }\r\n                }, {\r\n                    key: \"_applyDispatch\",\r\n                    value: function _applyDispatch() {\r\n                        var appended = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : '';\r\n                        var flags = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\r\n                        var prevValueBeforeTail = flags.tail && flags._beforeTailState != null ? flags._beforeTailState._value : this.value;\r\n                        var inputValue = this.rawInputValue;\r\n                        var insertValue = flags.tail && flags._beforeTailState != null ? // $FlowFixMe - tired to fight with type system\r\n                            flags._beforeTailState._rawInputValue : inputValue;\r\n                        var tailValue = inputValue.slice(insertValue.length);\r\n                        var prevMask = this.currentMask;\r\n                        var details = new ChangeDetails();\r\n                        var prevMaskState = prevMask && prevMask.state; // clone flags to prevent overwriting `_beforeTailState`\r\n\r\n                        this.currentMask = this.doDispatch(appended, Object.assign({}, flags)); // restore state after dispatch\r\n\r\n                        if (this.currentMask) {\r\n                            if (this.currentMask !== prevMask) {\r\n                                // if mask changed reapply input\r\n                                this.currentMask.reset();\r\n\r\n                                if (insertValue) {\r\n                                    // $FlowFixMe - it's ok, we don't change current mask above\r\n                                    var d = this.currentMask.append(insertValue, {\r\n                                        raw: true\r\n                                    });\r\n                                    details.tailShift = d.inserted.length - prevValueBeforeTail.length;\r\n                                }\r\n\r\n                                if (tailValue) {\r\n                                    // $FlowFixMe - it's ok, we don't change current mask above\r\n                                    details.tailShift += this.currentMask.append(tailValue, {\r\n                                        raw: true,\r\n                                        tail: true\r\n                                    }).tailShift;\r\n                                }\r\n                            } else {\r\n                                // Dispatch can do something bad with state, so\r\n                                // restore prev mask state\r\n                                this.currentMask.state = prevMaskState;\r\n                            }\r\n                        }\r\n\r\n                        return details;\r\n                    }\r\n                }, {\r\n                    key: \"_appendPlaceholder\",\r\n                    value: function _appendPlaceholder() {\r\n                        var details = this._applyDispatch.apply(this, arguments);\r\n\r\n                        if (this.currentMask) {\r\n                            details.aggregate(this.currentMask._appendPlaceholder());\r\n                        }\r\n\r\n                        return details;\r\n                    }\r\n                    /**\r\n                     @override\r\n                     */\r\n\r\n                }, {\r\n                    key: \"doDispatch\",\r\n                    value: function doDispatch(appended) {\r\n                        var flags = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\r\n                        return this.dispatch(appended, this, flags);\r\n                    }\r\n                    /**\r\n                     @override\r\n                     */\r\n\r\n                }, {\r\n                    key: \"doValidate\",\r\n                    value: function doValidate() {\r\n                        var _get2, _this$currentMask;\r\n\r\n                        for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\r\n                            args[_key] = arguments[_key];\r\n                        }\r\n\r\n                        return (_get2 = _get(_getPrototypeOf(MaskedDynamic.prototype), \"doValidate\", this)).call.apply(_get2, [this].concat(args)) && (!this.currentMask || (_this$currentMask = this.currentMask).doValidate.apply(_this$currentMask, args));\r\n                    }\r\n                    /**\r\n                     @override\r\n                     */\r\n\r\n                }, {\r\n                    key: \"reset\",\r\n                    value: function reset() {\r\n                        if (this.currentMask) this.currentMask.reset();\r\n                        this.compiledMasks.forEach(function (m) {\r\n                            return m.reset();\r\n                        });\r\n                    }\r\n                    /**\r\n                     @override\r\n                     */\r\n\r\n                }, {\r\n                    key: \"value\",\r\n                    get: function get() {\r\n                        return this.currentMask ? this.currentMask.value : '';\r\n                    },\r\n                    set: function set(value) {\r\n                        _set(_getPrototypeOf(MaskedDynamic.prototype), \"value\", value, this, true);\r\n                    }\r\n                    /**\r\n                     @override\r\n                     */\r\n\r\n                }, {\r\n                    key: \"unmaskedValue\",\r\n                    get: function get() {\r\n                        return this.currentMask ? this.currentMask.unmaskedValue : '';\r\n                    },\r\n                    set: function set(unmaskedValue) {\r\n                        _set(_getPrototypeOf(MaskedDynamic.prototype), \"unmaskedValue\", unmaskedValue, this, true);\r\n                    }\r\n                    /**\r\n                     @override\r\n                     */\r\n\r\n                }, {\r\n                    key: \"typedValue\",\r\n                    get: function get() {\r\n                        return this.currentMask ? this.currentMask.typedValue : '';\r\n                    } // probably typedValue should not be used with dynamic\r\n                    ,\r\n                    set: function set(value) {\r\n                        var unmaskedValue = String(value); // double check it\r\n\r\n                        if (this.currentMask) {\r\n                            this.currentMask.typedValue = value;\r\n                            unmaskedValue = this.currentMask.unmaskedValue;\r\n                        }\r\n\r\n                        this.unmaskedValue = unmaskedValue;\r\n                    }\r\n                    /**\r\n                     @override\r\n                     */\r\n\r\n                }, {\r\n                    key: \"isComplete\",\r\n                    get: function get() {\r\n                        return !!this.currentMask && this.currentMask.isComplete;\r\n                    }\r\n                    /**\r\n                     @override\r\n                     */\r\n\r\n                }, {\r\n                    key: \"remove\",\r\n                    value: function remove() {\r\n                        var details = new ChangeDetails();\r\n\r\n                        if (this.currentMask) {\r\n                            var _this$currentMask2;\r\n\r\n                            details.aggregate((_this$currentMask2 = this.currentMask).remove.apply(_this$currentMask2, arguments)) // update with dispatch\r\n                                .aggregate(this._applyDispatch());\r\n                        }\r\n\r\n                        return details;\r\n                    }\r\n                }, {\r\n                    key: \"state\",\r\n                    get: function get() {\r\n                        return Object.assign({}, _get(_getPrototypeOf(MaskedDynamic.prototype), \"state\", this), {\r\n                            _rawInputValue: this.rawInputValue,\r\n                            compiledMasks: this.compiledMasks.map(function (m) {\r\n                                return m.state;\r\n                            }),\r\n                            currentMaskRef: this.currentMask,\r\n                            currentMask: this.currentMask && this.currentMask.state\r\n                        });\r\n                    },\r\n                    set: function set(state) {\r\n                        var compiledMasks = state.compiledMasks,\r\n                            currentMaskRef = state.currentMaskRef,\r\n                            currentMask = state.currentMask,\r\n                            maskedState = _objectWithoutProperties(state, [\"compiledMasks\", \"currentMaskRef\", \"currentMask\"]);\r\n\r\n                        this.compiledMasks.forEach(function (m, mi) {\r\n                            return m.state = compiledMasks[mi];\r\n                        });\r\n\r\n                        if (currentMaskRef != null) {\r\n                            this.currentMask = currentMaskRef;\r\n                            this.currentMask.state = currentMask;\r\n                        }\r\n\r\n                        _set(_getPrototypeOf(MaskedDynamic.prototype), \"state\", maskedState, this, true);\r\n                    }\r\n                    /**\r\n                     @override\r\n                     */\r\n\r\n                }, {\r\n                    key: \"extractInput\",\r\n                    value: function extractInput() {\r\n                        var _this$currentMask3;\r\n\r\n                        return this.currentMask ? (_this$currentMask3 = this.currentMask).extractInput.apply(_this$currentMask3, arguments) : '';\r\n                    }\r\n                    /**\r\n                     @override\r\n                     */\r\n\r\n                }, {\r\n                    key: \"extractTail\",\r\n                    value: function extractTail() {\r\n                        var _this$currentMask4, _get3;\r\n\r\n                        for (var _len2 = arguments.length, args = new Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {\r\n                            args[_key2] = arguments[_key2];\r\n                        }\r\n\r\n                        return this.currentMask ? (_this$currentMask4 = this.currentMask).extractTail.apply(_this$currentMask4, args) : (_get3 = _get(_getPrototypeOf(MaskedDynamic.prototype), \"extractTail\", this)).call.apply(_get3, [this].concat(args));\r\n                    }\r\n                    /**\r\n                     @override\r\n                     */\r\n\r\n                }, {\r\n                    key: \"doCommit\",\r\n                    value: function doCommit() {\r\n                        if (this.currentMask) this.currentMask.doCommit();\r\n\r\n                        _get(_getPrototypeOf(MaskedDynamic.prototype), \"doCommit\", this).call(this);\r\n                    }\r\n                    /**\r\n                     @override\r\n                     */\r\n\r\n                }, {\r\n                    key: \"nearestInputPos\",\r\n                    value: function nearestInputPos() {\r\n                        var _this$currentMask5, _get4;\r\n\r\n                        for (var _len3 = arguments.length, args = new Array(_len3), _key3 = 0; _key3 < _len3; _key3++) {\r\n                            args[_key3] = arguments[_key3];\r\n                        }\r\n\r\n                        return this.currentMask ? (_this$currentMask5 = this.currentMask).nearestInputPos.apply(_this$currentMask5, args) : (_get4 = _get(_getPrototypeOf(MaskedDynamic.prototype), \"nearestInputPos\", this)).call.apply(_get4, [this].concat(args));\r\n                    }\r\n                }, {\r\n                    key: \"overwrite\",\r\n                    get: function get() {\r\n                        return this.currentMask ? this.currentMask.overwrite : _get(_getPrototypeOf(MaskedDynamic.prototype), \"overwrite\", this);\r\n                    },\r\n                    set: function set(overwrite) {\r\n                        console.warn('\"overwrite\" option is not available in dynamic mask, use this option in siblings');\r\n                    }\r\n                }]);\r\n\r\n                return MaskedDynamic;\r\n            }(Masked);\r\n            MaskedDynamic.DEFAULTS = {\r\n                dispatch: function dispatch(appended, masked, flags) {\r\n                    if (!masked.compiledMasks.length) return;\r\n                    var inputValue = masked.rawInputValue; // simulate input\r\n\r\n                    var inputs = masked.compiledMasks.map(function (m, index) {\r\n                        m.reset();\r\n                        m.append(inputValue, {\r\n                            raw: true\r\n                        });\r\n                        m.append(appended, flags);\r\n                        var weight = m.rawInputValue.length;\r\n                        return {\r\n                            weight: weight,\r\n                            index: index\r\n                        };\r\n                    }); // pop masks with longer values first\r\n\r\n                    inputs.sort(function (i1, i2) {\r\n                        return i2.weight - i1.weight;\r\n                    });\r\n                    return masked.compiledMasks[inputs[0].index];\r\n                }\r\n            };\r\n            IMask.MaskedDynamic = MaskedDynamic;\r\n\r\n            /** Mask pipe source and destination types */\r\n\r\n            var PIPE_TYPE = {\r\n                MASKED: 'value',\r\n                UNMASKED: 'unmaskedValue',\r\n                TYPED: 'typedValue'\r\n            };\r\n\r\n            /** Creates new pipe function depending on mask type, source and destination options */\r\n\r\n            function createPipe(mask) {\r\n                var from = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : PIPE_TYPE.MASKED;\r\n                var to = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : PIPE_TYPE.MASKED;\r\n                var masked = createMask(mask);\r\n                return function (value) {\r\n                    return masked.runIsolated(function (m) {\r\n                        m[from] = value;\r\n                        return m[to];\r\n                    });\r\n                };\r\n            }\r\n\r\n            /** Pipes value through mask depending on mask type, source and destination options */\r\n\r\n            function pipe(value) {\r\n                for (var _len = arguments.length, pipeArgs = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {\r\n                    pipeArgs[_key - 1] = arguments[_key];\r\n                }\r\n\r\n                return createPipe.apply(void 0, pipeArgs)(value);\r\n            }\r\n\r\n            IMask.PIPE_TYPE = PIPE_TYPE;\r\n            IMask.createPipe = createPipe;\r\n            IMask.pipe = pipe;\r\n\r\n            try {\r\n                globalThis.IMask = IMask;\r\n            } catch (e) {\r\n            }\r\n\r\n            exports.HTMLContenteditableMaskElement = HTMLContenteditableMaskElement;\r\n            exports.HTMLMaskElement = HTMLMaskElement;\r\n            exports.InputMask = InputMask;\r\n            exports.MaskElement = MaskElement;\r\n            exports.Masked = Masked;\r\n            exports.MaskedDate = MaskedDate;\r\n            exports.MaskedDynamic = MaskedDynamic;\r\n            exports.MaskedEnum = MaskedEnum;\r\n            exports.MaskedFunction = MaskedFunction;\r\n            exports.MaskedNumber = MaskedNumber;\r\n            exports.MaskedPattern = MaskedPattern;\r\n            exports.MaskedRange = MaskedRange;\r\n            exports.MaskedRegExp = MaskedRegExp;\r\n            exports.PIPE_TYPE = PIPE_TYPE;\r\n            exports.createMask = createMask;\r\n            exports.createPipe = createPipe;\r\n            exports.default = IMask;\r\n            exports.pipe = pipe;\r\n\r\n            Object.defineProperty(exports, '__esModule', {value: true});\r\n\r\n        })))\r\n\r\n        let element = document.getElementById('phone');\r\n        let maskOptions = {\r\n            mask: '+{998}(00)000-00-00'\r\n        };\r\n        let mask = IMask(element, maskOptions);\r\n    } catch (e) {}\r\n});\r\n\n\n//# sourceURL=webpack://registration/./public/js/_phone.js?");

/***/ }),

/***/ "./public/js/_redirect.js":
/*!********************************!*\
  !*** ./public/js/_redirect.js ***!
  \********************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (__WEBPACK_DEFAULT_EXPORT__)\n/* harmony export */ });\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = ((redirectUrl) => {\r\n    const {protocol, host} = window.location;\r\n    window.location.href = `${protocol}//${host}/${redirectUrl}`;\r\n});\r\n\n\n//# sourceURL=webpack://registration/./public/js/_redirect.js?");

/***/ }),

/***/ "./public/js/_register.js":
/*!********************************!*\
  !*** ./public/js/_register.js ***!
  \********************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (__WEBPACK_DEFAULT_EXPORT__)\n/* harmony export */ });\n/* harmony import */ var _redirect__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./_redirect */ \"./public/js/_redirect.js\");\n\r\n\r\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (() => {\r\n    try {\r\n        const registerForm = document.querySelector('.registration-form');\r\n        const registerError = document.querySelector('.registration-form__error');\r\n        const registerNameInput = document.querySelector('#name-input');\r\n        const registerPhoneInput = document.querySelector('#phone');\r\n        const registerTariffSelect = document.querySelector('#tariff-select');\r\n        const registerSubmitButton = document.querySelector('#submit-button');\r\n\r\n        registerForm.addEventListener('submit', e => {\r\n            e.preventDefault();\r\n\r\n            const name = registerNameInput.value.trim();\r\n            const phone = registerPhoneInput.value.replace(/\\D/g,'');\r\n            const tariff = registerTariffSelect.value;\r\n\r\n            if (!name?.length) {\r\n                registerError.textContent = 'Ismingizni kiriting';\r\n                registerError.classList.add('registration-form__error--show');\r\n                return;\r\n            }\r\n            if (phone?.length !== 12) {\r\n                registerError.textContent = 'Raqamingizni kiriting';\r\n                registerError.classList.add('registration-form__error--show');\r\n                return;\r\n            }\r\n            if (!['1', '2', '3'].includes(tariff)) {\r\n                registerError.textContent = 'Tarifni tanlang';\r\n                registerError.classList.add('registration-form__error--show');\r\n                return;\r\n            }\r\n\r\n            registerError.classList.remove('registration-form__error--show');\r\n\r\n            localStorage.setItem('user', JSON.stringify({\r\n                name, phone, tariff, time: new Date().getTime() + 900000\r\n            }))\r\n\r\n            ;(0,_redirect__WEBPACK_IMPORTED_MODULE_0__[\"default\"])('payment.html');\r\n        })\r\n    } catch (e) {\r\n    }\r\n});\r\n\n\n//# sourceURL=webpack://registration/./public/js/_register.js?");

/***/ }),

/***/ "./public/js/_users.js":
/*!*****************************!*\
  !*** ./public/js/_users.js ***!
  \*****************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (__WEBPACK_DEFAULT_EXPORT__)\n/* harmony export */ });\n/* harmony import */ var _config__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./_config */ \"./public/js/_config.js\");\n\r\n\r\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (() => {\r\n    try {\r\n        if (window.location.href.includes('users')) {\r\n            const tbody = document.querySelector('tbody');\r\n            const pagination = document.querySelector('#pagination');\r\n            let page = 1;\r\n            let users = [];\r\n\r\n            async function getUsersList() {\r\n                let response = await fetch(_config__WEBPACK_IMPORTED_MODULE_0__._config.HOST + 'get-screenshots', {\r\n                    method: 'GET',\r\n                    headers: {\r\n                        'Content-type': 'application/json'\r\n                    }\r\n                })\r\n\r\n                response = await response.json()\r\n\r\n                users = response?.users;\r\n                drawList();\r\n\r\n                pagination.innerHTML = '';\r\n                for (let i = 0; i < Math.ceil(users?.length / 50); i++) {\r\n                    pagination.innerHTML += `\r\n                <button data-paginator-button style=\"margin: 10px 2px; cursor: pointer\">${ i + 1 }</button>\r\n            `\r\n                }\r\n\r\n                document.querySelectorAll('[data-paginator-button]')?.forEach(button => {\r\n                    button.addEventListener('click', e => {\r\n                        page = +e.target.textContent;\r\n                        drawList();\r\n                    })\r\n                })\r\n            }\r\n\r\n            function drawList() {\r\n                tbody.innerHTML = '';\r\n                users.slice((page - 1) * 50, page * 50)?.forEach(user => {\r\n                    tbody.innerHTML += `\r\n                        <tr>\r\n                            <td>${ user.id }</td>\r\n                            <td>${ user.name }</td>\r\n                            <td style=\"cursor: pointer\" onclick=\"window.navigator.clipboard.writeText(${user.phone})\">\r\n                                ${ user.phone }\r\n                            </td>\r\n                            <td>${ user.date }</td>\r\n                            <td>\r\n                                <a href=\"${ _config__WEBPACK_IMPORTED_MODULE_0__._config.HOST }${ user?.img }\" target=\"_blank\">\r\n                                    <img width=\"50\" src=\"${ _config__WEBPACK_IMPORTED_MODULE_0__._config.HOST }${ user?.img }\" alt=\"\">\r\n                                </a>\r\n                            </td>\r\n                        </tr>\r\n                    `\r\n                })\r\n            }\r\n\r\n            getUsersList();\r\n        }\r\n    } catch (e) {\r\n    }\r\n});\n\n//# sourceURL=webpack://registration/./public/js/_users.js?");

/***/ }),

/***/ "./public/js/index.js":
/*!****************************!*\
  !*** ./public/js/index.js ***!
  \****************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony import */ var _modal__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./_modal */ \"./public/js/_modal.js\");\n/* harmony import */ var _phone__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./_phone */ \"./public/js/_phone.js\");\n/* harmony import */ var _register__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./_register */ \"./public/js/_register.js\");\n/* harmony import */ var _payment__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./_payment */ \"./public/js/_payment.js\");\n/* harmony import */ var _authorization__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./_authorization */ \"./public/js/_authorization.js\");\n/* harmony import */ var _users__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./_users */ \"./public/js/_users.js\");\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n(0,_phone__WEBPACK_IMPORTED_MODULE_1__[\"default\"])();\r\n(0,_modal__WEBPACK_IMPORTED_MODULE_0__[\"default\"])();\r\n(0,_register__WEBPACK_IMPORTED_MODULE_2__[\"default\"])();\r\n(0,_payment__WEBPACK_IMPORTED_MODULE_3__[\"default\"])();\r\n// Auth();\r\n(0,_users__WEBPACK_IMPORTED_MODULE_5__[\"default\"])();\r\n\n\n//# sourceURL=webpack://registration/./public/js/index.js?");

/***/ })

/******/ 	});
/************************************************************************/
/******/ 	// The module cache
/******/ 	var __webpack_module_cache__ = {};
/******/ 	
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/ 		// Check if module is in cache
/******/ 		var cachedModule = __webpack_module_cache__[moduleId];
/******/ 		if (cachedModule !== undefined) {
/******/ 			return cachedModule.exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = __webpack_module_cache__[moduleId] = {
/******/ 			// no module.id needed
/******/ 			// no module.loaded needed
/******/ 			exports: {}
/******/ 		};
/******/ 	
/******/ 		// Execute the module function
/******/ 		__webpack_modules__[moduleId](module, module.exports, __webpack_require__);
/******/ 	
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/ 	
/************************************************************************/
/******/ 	/* webpack/runtime/amd options */
/******/ 	(() => {
/******/ 		__webpack_require__.amdO = {};
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/define property getters */
/******/ 	(() => {
/******/ 		// define getter functions for harmony exports
/******/ 		__webpack_require__.d = (exports, definition) => {
/******/ 			for(var key in definition) {
/******/ 				if(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {
/******/ 					Object.defineProperty(exports, key, { enumerable: true, get: definition[key] });
/******/ 				}
/******/ 			}
/******/ 		};
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/global */
/******/ 	(() => {
/******/ 		__webpack_require__.g = (function() {
/******/ 			if (typeof globalThis === 'object') return globalThis;
/******/ 			try {
/******/ 				return this || new Function('return this')();
/******/ 			} catch (e) {
/******/ 				if (typeof window === 'object') return window;
/******/ 			}
/******/ 		})();
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/hasOwnProperty shorthand */
/******/ 	(() => {
/******/ 		__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/make namespace object */
/******/ 	(() => {
/******/ 		// define __esModule on exports
/******/ 		__webpack_require__.r = (exports) => {
/******/ 			if(typeof Symbol !== 'undefined' && Symbol.toStringTag) {
/******/ 				Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });
/******/ 			}
/******/ 			Object.defineProperty(exports, '__esModule', { value: true });
/******/ 		};
/******/ 	})();
/******/ 	
/************************************************************************/
/******/ 	
/******/ 	// startup
/******/ 	// Load entry module and return exports
/******/ 	// This entry module can't be inlined because the eval devtool is used.
/******/ 	var __webpack_exports__ = __webpack_require__("./public/js/index.js");
/******/ 	
/******/ })()
;